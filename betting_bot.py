import asyncio
import requests
import anthropic
import logging
import telegram
import nest_asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
import re
import sys
from retry import retry
import pytz
import os
import random
import traceback

# Configuration de base
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', 
                   handlers=[logging.StreamHandler(sys.stdout)])
logger = logging.getLogger(__name__)

@dataclass
class Config:
    TELEGRAM_BOT_TOKEN: str
    TELEGRAM_CHAT_ID: str
    ODDS_API_KEY: str
    PERPLEXITY_API_KEY: str
    CLAUDE_API_KEY: str
    MAX_MATCHES: int = 5
    MIN_PREDICTIONS: int = 5

@dataclass
class Match:
    home_team: str
    away_team: str
    competition: str
    region: str
    commence_time: datetime
    bookmakers: List[Dict]
    all_odds: List[Dict]
    priority: int = 0
    predicted_score1: str = ""
    predicted_score2: str = ""
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0

@dataclass
class Prediction:
    region: str
    competition: str
    match: str
    time: str
    predicted_score1: str
    predicted_score2: str
    prediction: str
    confidence: int
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0

class BettingBot:
    def __init__(self, config: Config):
        self.config = config
        self.bot = telegram.Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.claude_client = anthropic.Anthropic(api_key=config.CLAUDE_API_KEY)
        self.available_predictions = [
            "1X", "X2", "12", 
            "+1.5 buts", "+2.5 buts", "-3.5 buts",
            "1", "2",
            "-1.5 buts 1√®re mi-temps", 
            "+0.5 but 1√®re mi-temps", "+0.5 but 2√®me mi-temps"
        ]
        self.top_leagues = {
            "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø": 1,
            "Championnat d'Espagne de Football üá™üá∏": 1,
            "Championnat d'Allemagne de Football üá©üá™": 1,
            "Championnat d'Italie de Football üáÆüáπ": 1,
            "Championnat de France de Football üá´üá∑": 1,
            "Ligue des Champions de l'UEFA üá™üá∫": 1,
            "Ligue Europa de l'UEFA üá™üá∫": 1,
            "Championnat de Belgique de Football üáßüá™": 2,
            "Championnat des Pays-Bas de Football üá≥üá±": 2,
            "Championnat du Portugal de Football üáµüáπ": 2
        }
        print("Bot initialis√©!")

    def _get_league_name(self, competition: str) -> str:
        league_mappings = {
            "Premier League": "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
            "La Liga": "Championnat d'Espagne de Football üá™üá∏",
            "Bundesliga": "Championnat d'Allemagne de Football üá©üá™",
            "Serie A": "Championnat d'Italie de Football üáÆüáπ",
            "Ligue 1": "Championnat de France de Football üá´üá∑",
            "Champions League": "Ligue des Champions de l'UEFA üá™üá∫",
            "Europa League": "Ligue Europa de l'UEFA üá™üá∫",
            "Belgian First Division A": "Championnat de Belgique de Football üáßüá™",
            "Dutch Eredivisie": "Championnat des Pays-Bas de Football üá≥üá±",
            "Primeira Liga": "Championnat du Portugal de Football üáµüáπ"
        }
        return league_mappings.get(competition, competition)

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def fetch_matches(self, max_match_count: int = 15) -> List[Match]:
        """R√©cup√®re plus de matchs que n√©cessaire pour avoir des alternatives si certains √©chouent"""
        print("\n1Ô∏è‚É£ R√âCUP√âRATION DES MATCHS...")
        url = "https://api.the-odds-api.com/v4/sports/soccer/odds/"
        params = {
            "apiKey": self.config.ODDS_API_KEY,
            "regions": "eu",
            "markets": "h2h,totals",
            "oddsFormat": "decimal",
            "dateFormat": "iso"
        }

        try:
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            matches_data = response.json()
            print(f"‚úÖ {len(matches_data)} matchs r√©cup√©r√©s")

            current_time = datetime.now(timezone.utc)
            matches = []

            for match_data in matches_data:
                commence_time = datetime.fromisoformat(match_data["commence_time"].replace('Z', '+00:00'))
                # Prendre les matchs des prochaines 24 heures
                if 0 < (commence_time - current_time).total_seconds() <= 86400:
                    competition = self._get_league_name(match_data.get("sport_title", "Unknown"))
                    
                    # Extraire les cotes des bookmakers
                    home_odds, draw_odds, away_odds = 0.0, 0.0, 0.0
                    
                    if match_data.get("bookmakers") and len(match_data["bookmakers"]) > 0:
                        for bookmaker in match_data["bookmakers"]:
                            if bookmaker.get("markets") and len(bookmaker["markets"]) > 0:
                                for market in bookmaker["markets"]:
                                    if market["key"] == "h2h" and len(market["outcomes"]) == 3:
                                        for outcome in market["outcomes"]:
                                            if outcome["name"] == match_data["home_team"]:
                                                home_odds = outcome["price"]
                                            elif outcome["name"] == match_data["away_team"]:
                                                away_odds = outcome["price"]
                                            else:
                                                draw_odds = outcome["price"]
                                        break
                            if home_odds > 0 and draw_odds > 0 and away_odds > 0:
                                break
                    
                    matches.append(Match(
                        home_team=match_data["home_team"],
                        away_team=match_data["away_team"],
                        competition=competition,
                        region=competition.split()[-1] if " " in competition else competition,
                        commence_time=commence_time,
                        bookmakers=match_data.get("bookmakers", []),
                        all_odds=match_data.get("bookmakers", []),
                        priority=self.top_leagues.get(competition, 0),
                        home_odds=home_odds,
                        draw_odds=draw_odds,
                        away_odds=away_odds
                    ))

            if not matches:
                return []

            # Trier les matchs par priorit√© et heure de d√©but
            matches.sort(key=lambda x: (-x.priority, x.commence_time))
            
            # S'assurer de prendre au moins le nombre minimum requis de matchs (config.MIN_PREDICTIONS)
            # et au maximum max_match_count pour avoir des alternatives
            required_matches = max(self.config.MIN_PREDICTIONS, min(len(matches), max_match_count))
            top_matches = matches[:required_matches]
            
            print(f"\n‚úÖ {len(top_matches)} matchs candidats s√©lectionn√©s")
            for match in top_matches[:min(5, len(top_matches))]:
                print(f"- {match.home_team} vs {match.away_team} ({match.competition}) - Cotes: {match.home_odds}/{match.draw_odds}/{match.away_odds}")
                
            return top_matches

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des matchs: {str(e)}")
            return []

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def get_match_stats(self, match: Match) -> Optional[str]:
        print(f"\n2Ô∏è‚É£ ANALYSE DE {match.home_team} vs {match.away_team}")
        try:
            # Prompt am√©lior√© pour des statistiques plus compl√®tes
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en analyse sportive de football avec acc√®s aux donn√©es les plus r√©centes. 

Fais une analyse D√âTAILL√âE et FACTUELLE pour le match {match.home_team} vs {match.away_team} ({match.competition}) qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')}.

Analyse OBLIGATOIREMENT et avec PR√âCISION tous ces √©l√©ments:

1. FORME R√âCENTE (D√âTAILL√âE):
   - 5 derniers matchs de chaque √©quipe avec scores exacts, dates et contexte
   - Moyenne pr√©cise de buts marqu√©s/encaiss√©s par match (domicile/ext√©rieur)
   - Performance √† domicile/ext√©rieur (pourcentage de victoires, nuls, d√©faites)
   - Tendances r√©centes des deux √©quipes (forme ascendante/descendante)
   - Buts marqu√©s/encaiss√©s par mi-temps

2. CONFRONTATIONS DIRECTES (HISTORIQUE COMPLET):
   - Les 5 derni√®res rencontres entre ces √©quipes avec scores, dates et contexte
   - Tendances des confrontations (√©quipe dominante, nombre de buts)
   - Nombre moyen de buts dans ces confrontations
   - R√©sultats √† domicile/ext√©rieur dans les confrontations directes

3. STATISTIQUES CL√âS (PR√âCISES):
   - Pourcentage exact de matchs avec +1.5 buts pour chaque √©quipe
   - Pourcentage exact de matchs avec +2.5 buts pour chaque √©quipe
   - Pourcentage exact de matchs avec -3.5 buts pour chaque √©quipe
   - Pourcentage exact de matchs o√π les deux √©quipes marquent
   - Statistiques de possession et d'occasions cr√©√©es

4. ABSENCES ET EFFECTIF (D√âTAILS COMPLETS):
   - Liste des joueurs bless√©s ou suspendus importants
   - Impact des absences sur le jeu de l'√©quipe
   - Joueurs cl√©s disponibles et leur influence
   - √âtat de forme des buteurs principaux

5. CONTEXTE DU MATCH (ANALYSE COMPL√àTE):
   - Enjeu sportif (qualification, maintien, position au classement)
   - Importance du match pour chaque √©quipe
   - Contexte mental et dynamique d'√©quipe
   - Facteurs externes (m√©t√©o pr√©vue, √©tat du terrain)
   - Tactiques probables des entra√Æneurs

6. COTES ET PR√âDICTIONS DES EXPERTS:
   - Tendances des cotes et mouvements significatifs
   - Analyse des pr√©dictions d'experts de r√©f√©rence

Sois absolument pr√©cis et factuel avec des statistiques r√©elles et v√©rifiables."""
                    }],
                    "max_tokens": 850,  # Augment√© pour obtenir plus de d√©tails
                    "temperature": 0.1
                },
                timeout=90  # Augment√© pour permettre une analyse plus approfondie
            )
            response.raise_for_status()
            stats = response.json()["choices"][0]["message"]["content"]
            print("‚úÖ Statistiques compl√®tes r√©cup√©r√©es")
            return stats
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {str(e)}")
            
            # En cas d'√©chec, essayer avec un prompt plus court
            try:
                print("‚ö†Ô∏è Tentative avec un prompt simplifi√©...")
                response = requests.post(
                    "https://api.perplexity.ai/chat/completions",
                    headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                            "Content-Type": "application/json"},
                    json={
                        "model": "sonar",
                        "messages": [{
                            "role": "user", 
                            "content": f"""Analyse factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}):

1. Forme r√©cente des deux √©quipes (r√©sultats des 5 derniers matchs)
2. Confrontations directes r√©centes
3. Statistiques: matchs avec +1.5 buts, +2.5 buts, -3.5 buts
4. Absences importantes
5. Enjeu du match"""
                        }],
                        "max_tokens": 500,
                        "temperature": 0.1
                    },
                    timeout=45
                )
                response.raise_for_status()
                stats = response.json()["choices"][0]["message"]["content"]
                print("‚úÖ Statistiques basiques r√©cup√©r√©es")
                return stats
            except Exception as e:
                print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques simplifi√©es: {str(e)}")
                return None

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def get_predicted_scores(self, match: Match) -> Optional[tuple]:
        """R√©cup√®re les scores pr√©dits avec un prompt am√©lior√© pour des pr√©dictions plus pr√©cises"""
        print(f"\n3Ô∏è‚É£ OBTENTION DES SCORES EXACTS PROBABLES POUR {match.home_team} vs {match.away_team}")
        try:
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en analyse de football et pr√©diction de scores exacts, avec acc√®s aux donn√©es les plus r√©centes du monde du football. Tu utilises un syst√®me avanc√© de mod√©lisation statistique qui int√®gre:

1. M√âTHODE ELO AVANC√âE: 
   - Calcul pr√©cis de la force relative de chaque √©quipe
   - Prise en compte des performances r√©centes (pond√©ration exponentielle)
   - Ajustement pour l'avantage du terrain

2. MOD√àLE DE POISSON:
   - Distribution de Poisson pour estimer la probabilit√© de chaque nombre de buts
   - Analyse des moyennes de buts marqu√©s/encaiss√©s r√©centes

3. ANALYSE CONTEXTUELLE COMPL√àTE:
   - Importance du match (enjeu sportif, classement, qualification, derby)
   - Phase de la saison (d√©but, milieu, fin, p√©riode charg√©e)
   - Contexte de la comp√©tition (championnat, coupe, Europe)
   - S√©rie en cours (victoires cons√©cutives, d√©faites, nuls)

4. ANALYSE DES EFFECTIFS:
   - Joueurs cl√©s absents (bless√©s, suspendus)
   - Alignements probables et impact des changements
   - Retour de joueurs importants
   - Fatigue (rotation, calendrier charg√©)

5. FACTEURS EXTERNES:
   - Conditions m√©t√©orologiques pr√©vues (pluie, chaleur, vent)
   - √âtat du terrain
   - D√©placements (distance, d√©calage horaire)
   - Affluence et atmosph√®re (domicile/ext√©rieur/neutre)

6. STYLE DE JEU ET TACTIQUES:
   - Compatibilit√© des styles de jeu
   - Approche tactique probable des entra√Æneurs
   - Adaptation tactique selon la forme r√©cente

7. TENDANCES HISTORIQUES:
   - Confrontations directes r√©centes (5 derniers matchs)
   - Performance des √©quipes en fonction du contexte similaire
   - Tendances de buts par p√©riode (1√®re/2√®me mi-temps)

8. ANALYSE DES COTES:
   - Mouvements significatifs des cotes
   - Consensus des bookmakers
   - √âcarts notables entre cotes th√©oriques et cotes r√©elles

OBJECTIF: G√©n√©rer DEUX propositions de scores exacts pour le match {match.home_team} vs {match.away_team} ({match.competition}) pr√©vu le {match.commence_time.strftime('%d/%m/%Y')}.

Ces scores doivent refl√©ter l'issue la plus probable du match selon ton analyse compl√®te. Utilise TOUTES les donn√©es mentionn√©es ci-dessus pour une pr√©diction pr√©cise.

R√âPONDS UNIQUEMENT AU FORMAT EXACT: "Score 1: X-Y, Score 2: Z-W" o√π X, Y, Z et W sont des nombres entiers. Ne donne AUCUNE autre information ou explication."""
                    }],
                    "max_tokens": 150,
                    "temperature": 0.1
                },
                timeout=120  # 2 minutes pour les scores exacts
            )
            response.raise_for_status()
            prediction_text = response.json()["choices"][0]["message"]["content"].strip()
            
            # Extraire les deux scores
            score1_match = re.search(r'Score 1:\s*(\d+)-(\d+)', prediction_text)
            score2_match = re.search(r'Score 2:\s*(\d+)-(\d+)', prediction_text)
            
            if score1_match and score2_match:
                score1 = f"{score1_match.group(1)}-{score1_match.group(2)}"
                score2 = f"{score2_match.group(1)}-{score2_match.group(2)}"
                print(f"‚úÖ Scores probables obtenus: {score1} et {score2}")
                return score1, score2
            else:
                # Si le format n'est pas respect√©, extraire les scores si possible
                scores = re.findall(r'(\d+)[^\d]+(\d+)', prediction_text)
                if len(scores) >= 2:
                    score1 = f"{scores[0][0]}-{scores[0][1]}"
                    score2 = f"{scores[1][0]}-{scores[1][1]}"
                    print(f"‚úÖ Scores probables extraits: {score1} et {score2}")
                    return score1, score2
                else:
                    print("‚ùå Format de scores invalide, match ignor√©")
                    return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'obtention des scores probables: {str(e)}")
            return None

    def analyze_match(self, match: Match, stats: str) -> Optional[Prediction]:
        print(f"\n4Ô∏è‚É£ ANALYSE AVEC CLAUDE POUR {match.home_team} vs {match.away_team}")
        
        try:
            # Prompt am√©lior√© pour une analyse plus fine et des pr√©dictions plus fiables
            prompt = f"""ANALYSE APPROFONDIE POUR PR√âDICTION DE PARIS: {match.home_team} vs {match.away_team}
COMP√âTITION: {match.competition}
SCORES EXACTS PR√âDITS: {match.predicted_score1} et {match.predicted_score2}
COTES: Victoire {match.home_team}: {match.home_odds}, Match nul: {match.draw_odds}, Victoire {match.away_team}: {match.away_odds}

DONN√âES STATISTIQUES COMPL√àTES:
{stats}

CONSIGNES D'ANALYSE AVANC√âE:
1. Analyser M√âTICULEUSEMENT les statistiques fournies et les scores exacts pr√©dits
2. √âvaluer les tendances historiques et performances r√©centes avec PR√âCISION
3. Consid√©rer le CONTEXTE COMPLET du match (enjeu, classement, motivation)
4. Analyser l'IMPACT des absences et retours sur l'√©quilibre des forces
5. Prendre en compte les FACTEURS EXTERNES (m√©t√©o, terrain, d√©placement)
6. √âvaluer la COMPATIBILIT√â DES STYLES de jeu des deux √©quipes
7. Consid√©rer la FIABILIT√â HISTORIQUE des √©quipes pour maintenir un r√©sultat
8. Choisir la pr√©diction LA PLUS S√õRE possible parmi: {', '.join(self.available_predictions)}

R√àGLES DE V√âRIFICATION STRICTES:
- Pour pr√©dire une victoire √† domicile "1", l'√©quipe √† domicile doit avoir une cote MAXIMALE de 1.50 ET une forme r√©cente excellente
- Pour pr√©dire une victoire √† l'ext√©rieur "2", l'√©quipe ext√©rieure doit avoir une cote MAXIMALE de 1.50 ET une forme r√©cente excellente
- Pour pr√©dire "1X", l'√©quipe √† domicile doit √™tre favorite selon les statistiques ET les scores pr√©dits
- Pour pr√©dire "X2", l'√©quipe √† l'ext√©rieur doit √™tre favorite selon les statistiques ET les scores pr√©dits
- Ne JAMAIS donner "X2" si les scores pr√©dits favorisent l'√©quipe √† domicile
- Ne JAMAIS donner "1X" si les scores pr√©dits favorisent l'√©quipe √† l'ext√©rieur
- Pour pr√©dire "+1.5 buts", il faut √™tre s√ªr √† 90% que le match aura AU MOINS 2 BUTS
- Pour pr√©dire "+2.5 buts", il faut √™tre s√ªr √† 90% que le match aura AU MOINS 3 BUTS
- Pour pr√©dire "-3.5 buts", la probabilit√© doit √™tre d'au moins 85% que le match aura MOINS DE 4 BUTS
- Exiger une confiance d'au moins 85% pour TOUTE pr√©diction
- Le match nul "X" n'est PAS une option de pr√©diction acceptable
- Privil√©gier les pr√©dictions avec les statistiques les plus SOLIDES et COH√âRENTES
- En cas de doute, pr√©f√©rer une pr√©diction concernant le nombre de buts plut√¥t qu'une double chance non justifi√©e

FORMAT DE R√âPONSE REQUIS:
PREDICTION: [une option UNIQUE de la liste]
CONFIANCE: [pourcentage pr√©cis]"""

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1024,
                temperature=0.1,  # R√©duit pour plus de coh√©rence
                messages=[{"role": "user", "content": prompt}]
            )

            response = message.content[0].text
            prediction = re.search(r"PREDICTION:\s*(.*)", response)
            confidence = re.search(r"CONFIANCE:\s*(\d+)", response)

            if all([prediction, confidence]):
                pred = prediction.group(1).strip()
                conf = min(100, max(80, int(confidence.group(1))))
                
                if any(p.lower() in pred.lower() for p in self.available_predictions):
                    # Trouver la pr√©diction exacte dans la liste
                    for available_pred in self.available_predictions:
                        if available_pred.lower() in pred.lower():
                            pred = available_pred
                            break
                    
                    # V√©rifications suppl√©mentaires pour la fiabilit√© des pr√©dictions
                    # 1. V√©rifier la coh√©rence des victoires directes avec les cotes
                    if pred == "1" and match.home_odds > 1.50:
                        print(f"‚ö†Ô∏è Cote domicile trop √©lev√©e ({match.home_odds} > 1.50). Conversion en 1X.")
                        pred = "1X"
                    elif pred == "2" and match.away_odds > 1.50:
                        print(f"‚ö†Ô∏è Cote ext√©rieur trop √©lev√©e ({match.away_odds} > 1.50). Conversion en X2.")
                        pred = "X2"
                    
                    # 2. V√©rifier la coh√©rence des doubles chances avec les scores pr√©dits
                    if pred == "X2":
                        # Extraire les scores pour v√©rifier si l'√©quipe ext√©rieure est r√©ellement favoris√©e
                        home_goals1, away_goals1 = map(int, match.predicted_score1.split('-'))
                        home_goals2, away_goals2 = map(int, match.predicted_score2.split('-'))
                        
                        # Si les deux scores pr√©dits favorisent l'√©quipe √† domicile, rejeter X2
                        if home_goals1 > away_goals1 and home_goals2 > away_goals2:
                            print(f"‚ö†Ô∏è Incoh√©rence: X2 pr√©dit mais les scores {match.predicted_score1} et {match.predicted_score2} favorisent l'√©quipe √† domicile.")
                            # Proposer une pr√©diction alternative sur les buts
                            total_goals1 = home_goals1 + away_goals1
                            total_goals2 = home_goals2 + away_goals2
                            if total_goals1 >= 3 or total_goals2 >= 3:
                                pred = "+2.5 buts"
                                print(f"‚úÖ Pr√©diction ajust√©e √† {pred} pour coh√©rence avec les scores pr√©dits")
                            elif total_goals1 >= 2 or total_goals2 >= 2:
                                pred = "+1.5 buts"
                                print(f"‚úÖ Pr√©diction ajust√©e √† {pred} pour coh√©rence avec les scores pr√©dits")
                            else:
                                print("‚ùå Impossible de trouver une pr√©diction coh√©rente. Match ignor√©.")
                                return None
                    
                    elif pred == "1X":
                        # Extraire les scores pour v√©rifier si l'√©quipe √† domicile est r√©ellement favoris√©e
                        home_goals1, away_goals1 = map(int, match.predicted_score1.split('-'))
                        home_goals2, away_goals2 = map(int, match.predicted_score2.split('-'))
                        
                        # Si les deux scores pr√©dits favorisent l'√©quipe √† l'ext√©rieur, rejeter 1X
                        if home_goals1 < away_goals1 and home_goals2 < away_goals2:
                            print(f"‚ö†Ô∏è Incoh√©rence: 1X pr√©dit mais les scores {match.predicted_score1} et {match.predicted_score2} favorisent l'√©quipe √† l'ext√©rieur.")
                            # Proposer une pr√©diction alternative sur les buts
                            total_goals1 = home_goals1 + away_goals1
                            total_goals2 = home_goals2 + away_goals2
                            if total_goals1 >= 3 or total_goals2 >= 3:
                                pred = "+2.5 buts"
                                print(f"‚úÖ Pr√©diction ajust√©e √† {pred} pour coh√©rence avec les scores pr√©dits")
                            elif total_goals1 >= 2 or total_goals2 >= 2:
                                pred = "+1.5 buts"
                                print(f"‚úÖ Pr√©diction ajust√©e √† {pred} pour coh√©rence avec les scores pr√©dits")
                            else:
                                print("‚ùå Impossible de trouver une pr√©diction coh√©rente. Match ignor√©.")
                                return None
                    
                    if pred == "X":
                        print("‚ö†Ô∏è Pr√©diction de match nul non autoris√©e. Pr√©diction rejet√©e.")
                        return None
                    
                    print(f"‚úÖ Pr√©diction finale: {pred} (Confiance: {conf}%)")
                    
                    return Prediction(
                        region=match.region,
                        competition=match.competition,
                        match=f"{match.home_team} vs {match.away_team}",
                        time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                        predicted_score1=match.predicted_score1,
                        predicted_score2=match.predicted_score2,
                        prediction=pred,
                        confidence=conf,
                        home_odds=match.home_odds,
                        draw_odds=match.draw_odds,
                        away_odds=match.away_odds
                    )

            print("‚ùå Pas de pr√©diction fiable")
            return None

        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse avec Claude: {str(e)}")
            return None

    def _format_predictions_message(self, predictions: List[Prediction]) -> str:
        # Date du jour format√©e
        current_date = datetime.now().strftime('%d/%m/%Y')
        
        # En-t√™te du message avec formatage en gras
        msg = f"*ü§ñ AL VE AI BOT - PR√âDICTIONS DU {current_date} ü§ñ*\n\n"

        for i, pred in enumerate(predictions, 1):
            # Formatage des √©l√©ments avec gras et italique - SANS LES COTES
            msg += (
                f"*üìä MATCH #{i}*\n"
                f"üèÜ *{pred.competition}*\n"
                f"*‚öîÔ∏è {pred.match}*\n"
                f"‚è∞ Coup d'envoi : *{pred.time}*\n"
                f"üîÆ Scores pr√©dits : *{pred.predicted_score1}* ou *{pred.predicted_score2}*\n"
                f"üìà Pr√©diction : *{pred.prediction}*\n"
                f"‚úÖ Confiance : *{pred.confidence}%*\n\n"
                f"{'‚îÄ' * 20}\n\n"
            )

        # Pied de page avec formatage en gras et italique
        msg += (
            "*‚ö†Ô∏è RAPPEL IMPORTANT :*\n"
            "‚Ä¢ _Pariez de mani√®re responsable_\n"
            "‚Ä¢ _Ne d√©passez pas 5% de votre bankroll_\n"
            "‚Ä¢ *Ces pr√©dictions sont bas√©es sur l'analyse de donn√©es*"
        )
        return msg

    async def send_predictions(self, predictions: List[Prediction]) -> None:
        if not predictions:
            print("‚ùå Aucune pr√©diction √† envoyer")
            return

        print("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        
        try:
            message = self._format_predictions_message(predictions)
            
            # Envoyer un message avec formatage Markdown
            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="Markdown",  # Activer le formatage Markdown
                disable_web_page_preview=True
            )
            print(f"‚úÖ {len(predictions)} pr√©dictions envoy√©es!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")
          async def send_predictions(self, predictions: List[Prediction]) -> None:
        if not predictions:
            print("‚ùå Aucune pr√©diction √† envoyer")
            return

        print("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        
        try:
            message = self._format_predictions_message(predictions)
            
            # Envoyer un message avec formatage Markdown
            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="Markdown",  # Activer le formatage Markdown
                disable_web_page_preview=True
            )
            print(f"‚úÖ {len(predictions)} pr√©dictions envoy√©es!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")

    async def run(self) -> None:
        try:
            print(f"\n=== ü§ñ AL VE AI BOT - G√âN√âRATION DES PR√âDICTIONS ({datetime.now().strftime('%H:%M')}) ===")
            all_matches = self.fetch_matches(max_match_count=max(15, self.config.MIN_PREDICTIONS * 3))
            if not all_matches:
                print("‚ùå Aucun match trouv√© pour aujourd'hui")
                return

            predictions = []
            processed_count = 0
            
            # On continue jusqu'√† avoir le nombre minimum requis de pr√©dictions
            # ou jusqu'√† √©puiser tous les matchs disponibles
            for match in all_matches:
                processed_count += 1
                
                # Si on a atteint le nombre maximum de pr√©dictions, on s'arr√™te
                if len(predictions) >= self.config.MAX_MATCHES:
                    break
                
                # Obtenir les deux scores exacts probables
                scores = self.get_predicted_scores(match)
                if not scores:
                    print(f"‚ö†Ô∏è Impossible d'obtenir des scores exacts pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    continue
                    
                match.predicted_score1, match.predicted_score2 = scores
                
                # Obtenir les statistiques
                stats = self.get_match_stats(match)
                if not stats:
                    print(f"‚ö†Ô∏è Impossible d'obtenir des statistiques pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    continue
                
                # Analyser le match et obtenir une pr√©diction
                prediction = self.analyze_match(match, stats)
                if prediction:
                    predictions.append(prediction)
                    print(f"‚úÖ Pr√©diction {len(predictions)}/{self.config.MAX_MATCHES} obtenue")
                
                # Attendre un peu entre chaque analyse pour ne pas surcharger les API
                await asyncio.sleep(5)  # Attendre 5 secondes entre chaque match
            
            print(f"\nüìä {processed_count} matchs trait√©s, {len(predictions)} pr√©dictions obtenues")
            
            if predictions:
                if len(predictions) >= self.config.MIN_PREDICTIONS:
                    print(f"‚úÖ Nombre requis de pr√©dictions atteint: {len(predictions)}/{self.config.MIN_PREDICTIONS}")
                else:
                    print(f"‚ö†Ô∏è Seulement {len(predictions)}/{self.config.MIN_PREDICTIONS} pr√©dictions obtenues")
                
                # Limiter au nombre maximum de pr√©dictions si n√©cessaire
                if len(predictions) > self.config.MAX_MATCHES:
                    predictions = predictions[:self.config.MAX_MATCHES]
                
                # Envoyer les pr√©dictions disponibles
                await self.send_predictions(predictions)
                print("=== ‚úÖ EX√âCUTION TERMIN√âE ===")
            else:
                print("‚ùå Aucune pr√©diction fiable n'a pu √™tre g√©n√©r√©e")

        except Exception as e:
            print(f"‚ùå ERREUR G√âN√âRALE: {str(e)}")

async def send_test_message(bot, chat_id):
    """Envoie un message de test pour v√©rifier la connectivit√© avec Telegram"""
    try:
        message = "*ü§ñ AL VE AI BOT - TEST DE CONNEXION*\n\nLe bot de paris a √©t√© d√©ploy√© avec succ√®s et est pr√™t √† g√©n√©rer des pr√©dictions!"
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown"
        )
        print("‚úÖ Message de test envoy√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi du message de test: {str(e)}")

async def run_once():
    """Ex√©cute le bot une seule fois, pour les ex√©cutions via Render cron job"""
    print("D√©marrage du bot de paris sportifs en mode ex√©cution unique...")
    
    # Configuration √† partir des variables d'environnement
    config = Config(
        TELEGRAM_BOT_TOKEN=os.environ.get("TELEGRAM_BOT_TOKEN", ""),
        TELEGRAM_CHAT_ID=os.environ.get("TELEGRAM_CHAT_ID", ""),
        ODDS_API_KEY=os.environ.get("ODDS_API_KEY", ""),
        PERPLEXITY_API_KEY=os.environ.get("PERPLEXITY_API_KEY", ""),
        CLAUDE_API_KEY=os.environ.get("CLAUDE_API_KEY", ""),
        MAX_MATCHES=int(os.environ.get("MAX_MATCHES", "5")),
        MIN_PREDICTIONS=int(os.environ.get("MIN_PREDICTIONS", "5"))
    )
    
    bot = BettingBot(config)
    
    # Envoyer un message de test
    await send_test_message(bot.bot, config.TELEGRAM_CHAT_ID)
    
    # Ex√©cuter le bot
    await bot.run()
    
    print("Ex√©cution termin√©e.")

async def main():
    """Fonction principale qui d√©termine comment ex√©cuter le bot"""
    try:
        print("D√©marrage du bot de paris...")
        
        # Configuration √† partir des variables d'environnement
        config = Config(
            TELEGRAM_BOT_TOKEN=os.environ.get("TELEGRAM_BOT_TOKEN", ""),
            TELEGRAM_CHAT_ID=os.environ.get("TELEGRAM_CHAT_ID", ""),
            ODDS_API_KEY=os.environ.get("ODDS_API_KEY", ""),
            PERPLEXITY_API_KEY=os.environ.get("PERPLEXITY_API_KEY", ""),
            CLAUDE_API_KEY=os.environ.get("CLAUDE_API_KEY", ""),
            MAX_MATCHES=int(os.environ.get("MAX_MATCHES", "5")),
            MIN_PREDICTIONS=int(os.environ.get("MIN_PREDICTIONS", "5"))
        )
        
        # Initialiser le bot
        bot = BettingBot(config)
        
        # Test de connexion
        await send_test_message(bot.bot, config.TELEGRAM_CHAT_ID)
        
        # Ex√©cution imm√©diate
        print("‚è∞ Ex√©cution imm√©diate au d√©marrage...")
        await bot.run()
        print("‚úÖ Ex√©cution imm√©diate termin√©e")
        
        # Initialiser la date du dernier jour d'ex√©cution √† aujourd'hui
        # pour √©viter une nouvelle ex√©cution le m√™me jour
        today = datetime.now().day
        
        # Attendre jusqu'√† 8h le lendemain
        print("üïí Passage en mode attente: prochaine ex√©cution planifi√©e √† 8h00...")
        
        # Boucle principale du scheduler
        while True:
            # Heure actuelle en Afrique centrale (UTC+1)
            africa_central_tz = pytz.timezone("Africa/Lagos")  # Lagos est en UTC+1
            now = datetime.now(africa_central_tz)
            
            # Log d'activit√© toutes les heures (pour v√©rifier que le scheduler fonctionne)
            if now.minute == 0:
                print(f"Scheduler actif - Heure actuelle: {now.strftime('%Y-%m-%d %H:%M:%S')} (UTC+1)")
            
            # Ex√©cution planifi√©e √† 8h00, uniquement si on est un jour diff√©rent d'aujourd'hui
            if now.hour == 8 and now.minute < 10 and now.day != today:
                print(f"‚è∞ Ex√©cution planifi√©e du bot √† {now.strftime('%Y-%m-%d %H:%M:%S')} (heure d'Afrique centrale)")
                
                # Message de notification de d√©but d'ex√©cution
                await bot.bot.send_message(
                    chat_id=config.TELEGRAM_CHAT_ID,
                    text="*‚è∞ G√âN√âRATION DES PR√âDICTIONS*\n\nLes pr√©dictions du jour sont en cours de g√©n√©ration, veuillez patienter...",
                    parse_mode="Markdown"
                )
                
                # Ex√©cuter le bot
                await bot.run()
                
                # Mettre √† jour la date du jour apr√®s l'ex√©cution
                today = now.day
                print(f"‚úÖ Ex√©cution termin√©e. Prochaine ex√©cution pr√©vue demain √† 8h00")
                
                # Attendre un peu apr√®s l'ex√©cution pour √©viter les doublons
                await asyncio.sleep(600)  # 10 minutes
            
            # V√©rifier toutes les 30 secondes
            await asyncio.sleep(30)
    
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE dans la fonction principale: {str(e)}")
        traceback.print_exc()
        
        # En cas d'erreur critique, attendre avant de quitter
        await asyncio.sleep(300)  # 5 minutes

if __name__ == "__main__":
    asyncio.run(main())
