import asyncio
import requests
import anthropic
import logging
import telegram
import nest_asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
import re
import sys
from retry import retry
import pytz
import os
import random
import signal

# Configuration de base
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', 
                   handlers=[logging.StreamHandler(sys.stdout)])
logger = logging.getLogger(__name__)

# Variable pour contr√¥ler la boucle principale
running = True

# Gestionnaire de signaux pour arr√™ter proprement
def signal_handler(sig, frame):
    global running
    logger.info("Signal re√ßu, arr√™t en cours...")
    print("Signal re√ßu, arr√™t en cours...")
    running = False

# Enregistrer les gestionnaires de signaux
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

@dataclass
class Config:
    TELEGRAM_BOT_TOKEN: str
    TELEGRAM_CHAT_ID: str
    ODDS_API_KEY: str
    PERPLEXITY_API_KEY: str
    CLAUDE_API_KEY: str
    MAX_MATCHES: int = 5
    MIN_PREDICTIONS: int = 5  # Nombre minimum de pr√©dictions √† collecter

@dataclass
class Match:
    home_team: str
    away_team: str
    competition: str
    region: str
    commence_time: datetime
    bookmakers: List[Dict]
    all_odds: List[Dict]
    priority: int = 0
    predicted_score1: str = ""
    predicted_score2: str = ""
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0

@dataclass
class Prediction:
    region: str
    competition: str
    match: str
    time: str
    predicted_score1: str
    predicted_score2: str
    prediction: str
    confidence: int
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0

class BettingBot:
    def __init__(self, config: Config):
        self.config = config
        self.bot = telegram.Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.claude_client = anthropic.Anthropic(api_key=config.CLAUDE_API_KEY)
        self.available_predictions = [
            "1X", "X2", "12", 
            "+1.5 buts", "+2.5 buts", "-3.5 buts",
            "1", "2",  # Suppression du match nul comme pr√©diction
            "-1.5 buts 1√®re mi-temps", 
            "+0.5 but 1√®re mi-temps", "+0.5 but 2√®me mi-temps"
        ]
        self.top_leagues = {
            "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø": 1,
            "Championnat d'Espagne de Football üá™üá∏": 1,
            "Championnat d'Allemagne de Football üá©üá™": 1,
            "Championnat d'Italie de Football üáÆüáπ": 1,
            "Championnat de France de Football üá´üá∑": 1,
            "Ligue des Champions de l'UEFA üá™üá∫": 1,
            "Ligue Europa de l'UEFA üá™üá∫": 1,
            "Championnat de Belgique de Football üáßüá™": 2,
            "Championnat des Pays-Bas de Football üá≥üá±": 2,
            "Championnat du Portugal de Football üáµüáπ": 2
        }
        logger.info("Bot initialis√©!")
        print("Bot initialis√©!")

    def _get_league_name(self, competition: str) -> str:
        league_mappings = {
            "Premier League": "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
            "La Liga": "Championnat d'Espagne de Football üá™üá∏",
            "Bundesliga": "Championnat d'Allemagne de Football üá©üá™",
            "Serie A": "Championnat d'Italie de Football üáÆüáπ",
            "Ligue 1": "Championnat de France de Football üá´üá∑",
            "Champions League": "Ligue des Champions de l'UEFA üá™üá∫",
            "Europa League": "Ligue Europa de l'UEFA üá™üá∫",
            "Belgian First Division A": "Championnat de Belgique de Football üáßüá™",
            "Dutch Eredivisie": "Championnat des Pays-Bas de Football üá≥üá±",
            "Primeira Liga": "Championnat du Portugal de Football üáµüáπ"
        }
        return league_mappings.get(competition, competition)

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def fetch_matches(self, max_match_count: int = 15) -> List[Match]:
        """R√©cup√®re plus de matchs que n√©cessaire pour avoir des alternatives si certains √©chouent"""
        logger.info("\n1Ô∏è‚É£ R√âCUP√âRATION DES MATCHS...")
        print("\n1Ô∏è‚É£ R√âCUP√âRATION DES MATCHS...")
        url = "https://api.the-odds-api.com/v4/sports/soccer/odds/"
        params = {
            "apiKey": self.config.ODDS_API_KEY,
            "regions": "eu",
            "markets": "h2h,totals",
            "oddsFormat": "decimal",
            "dateFormat": "iso"
        }

        try:
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            matches_data = response.json()
            logger.info(f"‚úÖ {len(matches_data)} matchs r√©cup√©r√©s")
            print(f"‚úÖ {len(matches_data)} matchs r√©cup√©r√©s")

            current_time = datetime.now(timezone.utc)
            matches = []

            for match_data in matches_data:
                commence_time = datetime.fromisoformat(match_data["commence_time"].replace('Z', '+00:00'))
                # Prendre les matchs des prochaines 24 heures
                if 0 < (commence_time - current_time).total_seconds() <= 86400:
                    competition = self._get_league_name(match_data.get("sport_title", "Unknown"))
                    
                    # Extraire les cotes des bookmakers
                    home_odds, draw_odds, away_odds = 0.0, 0.0, 0.0
                    
                    if match_data.get("bookmakers") and len(match_data["bookmakers"]) > 0:
                        for bookmaker in match_data["bookmakers"]:
                            if bookmaker.get("markets") and len(bookmaker["markets"]) > 0:
                                for market in bookmaker["markets"]:
                                    if market["key"] == "h2h" and len(market["outcomes"]) == 3:
                                        for outcome in market["outcomes"]:
                                            if outcome["name"] == match_data["home_team"]:
                                                home_odds = outcome["price"]
                                            elif outcome["name"] == match_data["away_team"]:
                                                away_odds = outcome["price"]
                                            else:
                                                draw_odds = outcome["price"]
                                        break
                            if home_odds > 0 and draw_odds > 0 and away_odds > 0:
                                break
                    
                    matches.append(Match(
                        home_team=match_data["home_team"],
                        away_team=match_data["away_team"],
                        competition=competition,
                        region=competition.split()[-1] if " " in competition else competition,
                        commence_time=commence_time,
                        bookmakers=match_data.get("bookmakers", []),
                        all_odds=match_data.get("bookmakers", []),
                        priority=self.top_leagues.get(competition, 0),
                        home_odds=home_odds,
                        draw_odds=draw_odds,
                        away_odds=away_odds
                    ))

            if not matches:
                return []

            # Trier les matchs par priorit√© et heure de d√©but
            matches.sort(key=lambda x: (-x.priority, x.commence_time))
            
            # Prendre plus de matchs que n√©cessaire pour avoir des alternatives
            top_matches = matches[:max_match_count]
            
            logger.info(f"\n‚úÖ {len(top_matches)} matchs candidats s√©lectionn√©s")
            print(f"\n‚úÖ {len(top_matches)} matchs candidats s√©lectionn√©s")
            for match in top_matches[:5]:
                logger.info(f"- {match.home_team} vs {match.away_team} ({match.competition}) - Cotes: {match.home_odds}/{match.draw_odds}/{match.away_odds}")
                print(f"- {match.home_team} vs {match.away_team} ({match.competition}) - Cotes: {match.home_odds}/{match.draw_odds}/{match.away_odds}")
                
            return top_matches

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des matchs: {str(e)}")
            print(f"‚ùå Erreur lors de la r√©cup√©ration des matchs: {str(e)}")
            return []

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def get_match_stats(self, match: Match) -> Optional[str]:
        logger.info(f"\n2Ô∏è‚É£ ANALYSE DE {match.home_team} vs {match.away_team}")
        print(f"\n2Ô∏è‚É£ ANALYSE DE {match.home_team} vs {match.away_team}")
        try:
            # Utiliser le m√™me mod√®le et prompt que pour les scores exacts
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en analyse sportive de football. 

Fais une analyse d√©taill√©e et factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}) qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')}.

Analyse OBLIGATOIREMENT tous ces √©l√©ments:
1. FORME R√âCENTE:
   - 5 derniers matchs de chaque √©quipe avec les r√©sultats exacts
   - Moyenne de buts marqu√©s/encaiss√©s par match
   - Performance √† domicile/ext√©rieur (pourcentage de victoires)

2. CONFRONTATIONS DIRECTES:
   - Les 5 derni√®res rencontres entre ces √©quipes avec scores
   - Tendances des confrontations (√©quipe dominante)
   - Nombre moyen de buts dans ces confrontations

3. STATISTIQUES CL√âS:
   - Pourcentage de matchs avec +1.5 buts pour chaque √©quipe
   - Pourcentage de matchs avec +2.5 buts pour chaque √©quipe
   - Pourcentage de matchs avec -3.5 buts pour chaque √©quipe
   - Pourcentage de matchs o√π les deux √©quipes marquent

4. ABSENCES ET EFFECTIF:
   - Joueurs bless√©s ou suspendus importants
   - Impact des absences sur le jeu de l'√©quipe

5. CONTEXTE DU MATCH:
   - Enjeu sportif (qualification, maintien, position au classement)
   - Importance du match pour chaque √©quipe

Sois aussi pr√©cis et factuel que possible avec des statistiques r√©elles."""
                    }],
                    "max_tokens": 700,
                    "temperature": 0.1
                },
                timeout=60  # 1 minute pour obtenir les statistiques
            )
            response.raise_for_status()
            stats = response.json()["choices"][0]["message"]["content"]
            logger.info("‚úÖ Statistiques compl√®tes r√©cup√©r√©es")
            print("‚úÖ Statistiques compl√®tes r√©cup√©r√©es")
            return stats
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {str(e)}")
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {str(e)}")
            
            # En cas d'√©chec, essayer avec un prompt plus court
            try:
                logger.info("‚ö†Ô∏è Tentative avec un prompt simplifi√©...")
                print("‚ö†Ô∏è Tentative avec un prompt simplifi√©...")
                response = requests.post(
                    "https://api.perplexity.ai/chat/completions",
                    headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                            "Content-Type": "application/json"},
                    json={
                        "model": "sonar",
                        "messages": [{
                            "role": "user", 
                            "content": f"""Analyse factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}):

1. Forme r√©cente des deux √©quipes (r√©sultats des 5 derniers matchs)
2. Confrontations directes r√©centes
3. Statistiques: matchs avec +1.5 buts, +2.5 buts, -3.5 buts
4. Absences importantes
5. Enjeu du match"""
                        }],
                        "max_tokens": 500,
                        "temperature": 0.1
                    },
                    timeout=45
                )
                response.raise_for_status()
                stats = response.json()["choices"][0]["message"]["content"]
                logger.info("‚úÖ Statistiques basiques r√©cup√©r√©es")
                print("‚úÖ Statistiques basiques r√©cup√©r√©es")
                return stats
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques simplifi√©es: {str(e)}")
                print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques simplifi√©es: {str(e)}")
                return None

    @retry(tries=2, delay=5, backoff=2, logger=logger)
    def get_predicted_scores(self, match: Match) -> Optional[tuple]:
        """R√©cup√®re les scores pr√©dits, retourne None si impossible d'obtenir des pr√©dictions fiables"""
        logger.info(f"\n3Ô∏è‚É£ OBTENTION DES SCORES EXACTS PROBABLES POUR {match.home_team} vs {match.away_team}")
        print(f"\n3Ô∏è‚É£ OBTENTION DES SCORES EXACTS PROBABLES POUR {match.home_team} vs {match.away_team}")
        try:
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en paris sportifs, sp√©cialis√©e dans la pr√©diction de scores exacts. Tu utilises des mod√®les statistiques avanc√©s, y compris la m√©thode ELO, pour √©valuer la force relative des √©quipes et estimer le nombre de buts potentiels de chaque √©quipe dans un match.

Objectif: G√©n√©rer deux propositions de scores exacts pour le match {match.home_team} vs {match.away_team} qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')} en {match.competition}.

Pour g√©n√©rer ces pr√©dictions, analyse les √©l√©ments suivants:
1. Contexte du match (comp√©tition, enjeu, phase du tournoi)
2. Forme et performances des √©quipes (5 derniers matchs, buts marqu√©s/encaiss√©s)
3. Confrontations directes (historique entre les √©quipes)
4. Absences et forme des joueurs cl√©s
5. Analyse avec la m√©thode ELO et statistiques avanc√©es
6. Tendances des bookmakers et experts
7. Facteurs psychologiques et extra-sportifs

R√©ponds UNIQUEMENT au format "Score 1: X-Y, Score 2: Z-W" o√π X,Y,Z,W sont des nombres entiers. Ne donne aucune autre information ou explication."""
                    }],
                    "max_tokens": 100,
                    "temperature": 0.1
                },
                timeout=120  # 2 minutes pour les scores exacts
            )
            response.raise_for_status()
            prediction_text = response.json()["choices"][0]["message"]["content"].strip()
            
            # Extraire les deux scores
            score1_match = re.search(r'Score 1:\s*(\d+)-(\d+)', prediction_text)
            score2_match = re.search(r'Score 2:\s*(\d+)-(\d+)', prediction_text)
            
            if score1_match and score2_match:
                score1 = f"{score1_match.group(1)}-{score1_match.group(2)}"
                score2 = f"{score2_match.group(1)}-{score2_match.group(2)}"
                logger.info(f"‚úÖ Scores probables obtenus: {score1} et {score2}")
                print(f"‚úÖ Scores probables obtenus: {score1} et {score2}")
                return score1, score2
            else:
                # Si le format n'est pas respect√©, extraire les scores si possible
                scores = re.findall(r'(\d+)[^\d]+(\d+)', prediction_text)
                if len(scores) >= 2:
                    score1 = f"{scores[0][0]}-{scores[0][1]}"
                    score2 = f"{scores[1][0]}-{scores[1][1]}"
                    logger.info(f"‚úÖ Scores probables extraits: {score1} et {score2}")
                    print(f"‚úÖ Scores probables extraits: {score1} et {score2}")
                    return score1, score2
                else:
                    logger.error("‚ùå Format de scores invalide, match ignor√©")
                    print("‚ùå Format de scores invalide, match ignor√©")
                    return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'obtention des scores probables: {str(e)}")
            print(f"‚ùå Erreur lors de l'obtention des scores probables: {str(e)}")
            return None

    def analyze_match(self, match: Match, stats: str) -> Optional[Prediction]:
        logger.info(f"\n4Ô∏è‚É£ ANALYSE AVEC CLAUDE POUR {match.home_team} vs {match.away_team}")
        print(f"\n4Ô∏è‚É£ ANALYSE AVEC CLAUDE POUR {match.home_team} vs {match.away_team}")
        
        try:
            prompt = f"""ANALYSE APPROFONDIE: {match.home_team} vs {match.away_team}
COMP√âTITION: {match.competition}
SCORES EXACTS PR√âDITS: {match.predicted_score1} et {match.predicted_score2}
COTES: Victoire {match.home_team}: {match.home_odds}, Match nul: {match.draw_odds}, Victoire {match.away_team}: {match.away_odds}

DONN√âES STATISTIQUES:
{stats}

CONSIGNES STRICTES:
1. Analyser en profondeur les statistiques fournies et les scores exacts pr√©dits
2. √âvaluer les tendances et performances des √©quipes
3. Consid√©rer les scores exacts pr√©dits par les experts
4. Choisir la pr√©diction LA PLUS S√õRE parmi: {', '.join(self.available_predictions)}

R√àGLES DE V√âRIFICATION OBLIGATOIRES:
- Pour pr√©dire une victoire √† domicile "1", l'√©quipe √† domicile doit avoir une cote MAXIMALE de 1.50
- Pour pr√©dire une victoire √† l'ext√©rieur "2", l'√©quipe ext√©rieure doit avoir une cote MAXIMALE de 1.50
- Si la cote est sup√©rieure √† 1.50, NE PAS pr√©dire de victoire directe; pr√©f√©rer double chance (1X ou X2)
- Pour pr√©dire "+1.5 buts", on doit √™tre s√ªr √† 90% que le match aura AU MOINS 3 BUTS
- Pour pr√©dire "+2.5 buts", on doit √™tre s√ªr √† 90% que le match aura AU MOINS 4 BUTS
- Pour pr√©dire "-3.5 buts", la probabilit√© doit √™tre d'au moins 80% que le match aura moins de 4 buts
- Ne jamais donner de pr√©diction sans une confiance d'au moins 80%
- Le match nul "X" n'est PAS une option de pr√©diction acceptable
- Privil√©gier les pr√©dictions avec les statistiques les plus solides

FORMAT REQUIS:
PREDICTION: [une option de la liste]
CONFIANCE: [pourcentage]"""

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1024,
                temperature=0.5,
                messages=[{"role": "user", "content": prompt}]
            )

            response = message.content[0].text
            prediction = re.search(r"PREDICTION:\s*(.*)", response)
            confidence = re.search(r"CONFIANCE:\s*(\d+)", response)

            if all([prediction, confidence]):
                pred = prediction.group(1).strip()
                conf = min(100, max(80, int(confidence.group(1))))
                
                if any(p.lower() in pred.lower() for p in self.available_predictions):
                    # Trouver la pr√©diction exacte dans la liste
                    for available_pred in self.available_predictions:
                        if available_pred.lower() in pred.lower():
                            pred = available_pred
                            break
                    
                    # V√©rifications suppl√©mentaires pour la fiabilit√©
                    # Appliquer les r√®gles strictes pour les victoires directes
                    if pred == "1" and match.home_odds > 1.50:
                        logger.warning(f"‚ö†Ô∏è Cote domicile trop √©lev√©e ({match.home_odds} > 1.50). Conversion en 1X.")
                        print(f"‚ö†Ô∏è Cote domicile trop √©lev√©e ({match.home_odds} > 1.50). Conversion en 1X.")
                        pred = "1X"
                    elif pred == "2" and match.away_odds > 1.50:
                        logger.warning(f"‚ö†Ô∏è Cote ext√©rieur trop √©lev√©e ({match.away_odds} > 1.50). Conversion en X2.")
                        print(f"‚ö†Ô∏è Cote ext√©rieur trop √©lev√©e ({match.away_odds} > 1.50). Conversion en X2.")
                        pred = "X2"
                    
                    if pred == "X":
                        logger.warning("‚ö†Ô∏è Pr√©diction de match nul non autoris√©e. Pr√©diction rejet√©e.")
                        print("‚ö†Ô∏è Pr√©diction de match nul non autoris√©e. Pr√©diction rejet√©e.")
                        return None
                    
                    logger.info(f"‚úÖ Pr√©diction finale: {pred} (Confiance: {conf}%)")
                    print(f"‚úÖ Pr√©diction finale: {pred} (Confiance: {conf}%)")
                    
                    return Prediction(
                        region=match.region,
                        competition=match.competition,
                        match=f"{match.home_team} vs {match.away_team}",
                        time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                        predicted_score1=match.predicted_score1,
                        predicted_score2=match.predicted_score2,
                        prediction=pred,
                        confidence=conf,
                        home_odds=match.home_odds,
                        draw_odds=match.draw_odds,
                        away_odds=match.away_odds
                    )

            logger.error("‚ùå Pas de pr√©diction fiable")
            print("‚ùå Pas de pr√©diction fiable")
            return None

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse avec Claude: {str(e)}")
            print(f"‚ùå Erreur lors de l'analyse avec Claude: {str(e)}")
            return None

    def _format_predictions_message(self, predictions: List[Prediction]) -> str:
        # Date du jour format√©e
        current_date = datetime.now().strftime('%d/%m/%Y')
        
        # En-t√™te du message avec formatage en gras
        msg = f"*ü§ñ AL VE AI BOT - PR√âDICTIONS DU {current_date} ü§ñ*\n\n"

        for i, pred in enumerate(predictions, 1):
            # Formatage des √©l√©ments avec gras et italique - SANS LES COTES
            msg += (
                f"*üìä MATCH #{i}*\n"
                f"üèÜ _{pred.competition}_\n"
                f"*‚öîÔ∏è {pred.match}*\n"
                f"‚è∞ Coup d'envoi : _{pred.time}_\n"
                f"üîÆ Scores pr√©dits : *{pred.predicted_score1}* ou *{pred.predicted_score2}*\n"
                f"üìà Pr√©diction : *{pred.prediction}*\n"
                f"‚úÖ Confiance : *{pred.confidence}%*\n\n"
                f"{'‚îÄ' * 20}\n\n"
            )

        # Pied de page avec formatage en gras et italique
        msg += (
            "*‚ö†Ô∏è RAPPEL IMPORTANT :*\n"
            "‚Ä¢ _Pariez de mani√®re responsable_\n"
            "‚Ä¢ _Ne d√©passez pas 5% de votre bankroll_\n"
            "‚Ä¢ *Ces pr√©dictions sont bas√©es sur l'analyse de donn√©es*"
        )
        return msg

    async def send_predictions(self, predictions: List[Prediction]) -> None:
        if not predictions:
            logger.error("‚ùå Aucune pr√©diction √† envoyer")
            print("‚ùå Aucune pr√©diction √† envoyer")
            return

        logger.info("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        print("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        
        try:
            message = self._format_predictions_message(predictions)
            
            # Envoyer un message avec formatage Markdown
            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="Markdown",  # Activer le formatage Markdown
                disable_web_page_preview=True
            )
            logger.info(f"‚úÖ {len(predictions)} pr√©dictions envoy√©es!")
            print(f"‚úÖ {len(predictions)} pr√©dictions envoy√©es!")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")
            print(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")

    async def run(self) -> None:
        try:
            logger.info(f"\n=== ü§ñ AL VE AI BOT - G√âN√âRATION DES PR√âDICTIONS ({datetime.now().strftime('%H:%M')}) ===")
            print(f"\n=== ü§ñ AL VE AI BOT - G√âN√âRATION DES PR√âDICTIONS ({datetime.now().strftime('%H:%M')}) ===")
            all_matches = self.fetch_matches()
            if not all_matches:
                logger.error("‚ùå Aucun match trouv√© pour aujourd'hui")
                print("‚ùå Aucun match trouv√© pour aujourd'hui")
                return

            predictions = []
            processed_count = 0
            
            # On continue jusqu'√† avoir le nombre minimum requis de pr√©dictions
            # ou jusqu'√† √©puiser tous les matchs disponibles
            for match in all_matches:
                processed_count += 1
                
                # Si on a atteint le nombre de pr√©dictions requis, on s'arr√™te
                if len(predictions) >= self.config.MIN_PREDICTIONS:
                    break
                
                # Obtenir les deux scores exacts probables
                scores = self.get_predicted_scores(match)
                if not scores:
                    logger.warning(f"‚ö†Ô∏è Impossible d'obtenir des scores exacts pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    print(f"‚ö†Ô∏è Impossible d'obtenir des scores exacts pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    continue
                    
                match.predicted_score1, match.predicted_score2 = scores
                
                # Obtenir les statistiques
                stats = self.get_match_stats(match)
                if not stats:
                    logger.warning(f"‚ö†Ô∏è Impossible d'obtenir des statistiques pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    print(f"‚ö†Ô∏è Impossible d'obtenir des statistiques pour {match.home_team} vs {match.away_team}. Match ignor√©.")
                    continue
                
                # Analyser le match et obtenir une pr√©diction
                prediction = self.analyze_match(match, stats)
                if prediction:
                    predictions.append(prediction)
                    logger.info(f"‚úÖ Pr√©diction {len(predictions)}/{self.config.MAX_MATCHES} obtenue")
                    print(f"‚úÖ Pr√©diction {len(predictions)}/{self.config.MAX_MATCHES} obtenue")
                
                # Attendre un peu entre chaque analyse pour ne pas surcharger les API
                await asyncio.sleep(5)  # Attendre 5 secondes entre chaque match
            
            logger.info(f"\nüìä {processed_count} matchs trait√©s, {len(predictions)} pr√©dictions obtenues")
            print(f"\nüìä {processed_count} matchs trait√©s, {len(predictions)} pr√©dictions obtenues")
            
            if predictions:
                if len(predictions) >= self.config.MIN_PREDICTIONS:
                    logger.info(f"‚úÖ Nombre requis de pr√©dictions atteint: {len(predictions)}/{self.config.MIN_PREDICTIONS}")
                    print(f"‚úÖ Nombre requis de pr√©dictions atteint: {len(predictions)}/{self.config.MIN_PREDICTIONS}")
                else:
                    logger.warning(f"‚ö†Ô∏è Seulement {len(predictions)}/{self.config.MIN_PREDICTIONS} pr√©dictions obtenues")
                    print(f"‚ö†Ô∏è Seulement {len(predictions)}/{self.config.MIN_PREDICTIONS} pr√©dictions obtenues")
                
                # Limiter au nombre maximum de pr√©dictions si n√©cessaire
                if len(predictions) > self.config.MAX_MATCHES:
                    predictions = predictions[:self.config.MAX_MATCHES]
                
                # Envoyer les pr√©dictions disponibles
                await self.send_predictions(predictions)
                logger.info("=== ‚úÖ EX√âCUTION TERMIN√âE ===")
                print("=== ‚úÖ EX√âCUTION TERMIN√âE ===")
            else:
                logger.error("‚ùå Aucune pr√©diction fiable n'a pu √™tre g√©n√©r√©e")
                print("‚ùå Aucune pr√©diction fiable n'a pu √™tre g√©n√©r√©e")

        except Exception as e:
            logger.error(f"‚ùå ERREUR G√âN√âRALE: {str(e)}")
            print(f"‚ùå ERREUR G√âN√âRALE: {str(e)}")
