import asyncio
import requests
import anthropic
import logging
import telegram
import nest_asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
import re
import sys
from retry import retry
import pytz  # Pour g√©rer les fuseaux horaires
import os   # Pour les variables d'environnement

# Configuration de base
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', 
                   handlers=[logging.StreamHandler(sys.stdout)])
logger = logging.getLogger(__name__)

@dataclass
class Config:
    TELEGRAM_BOT_TOKEN: str
    TELEGRAM_CHAT_ID: str
    ODDS_API_KEY: str
    PERPLEXITY_API_KEY: str
    CLAUDE_API_KEY: str
    MAX_MATCHES: int = 5

@dataclass
class Match:
    home_team: str
    away_team: str
    competition: str
    region: str
    commence_time: datetime
    bookmakers: List[Dict]
    all_odds: List[Dict]
    priority: int = 0
    predicted_score1: str = ""
    predicted_score2: str = ""

@dataclass
class Prediction:
    region: str
    competition: str
    match: str
    time: str
    predicted_score1: str
    predicted_score2: str
    prediction: str
    confidence: int

class BettingBot:
    def __init__(self, config: Config):
        self.config = config
        self.bot = telegram.Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.claude_client = anthropic.Anthropic(api_key=config.CLAUDE_API_KEY)
        self.available_predictions = [
            "1X", "X2", "12", 
            "+1.5 buts", "+2.5 buts", "-3.5 buts",
            "1", "X", "2",
            "-1.5 buts 1√®re mi-temps", 
            "+0.5 but 1√®re mi-temps", "+0.5 but 2√®me mi-temps"
        ]
        self.top_leagues = {
            "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø": 1,
            "Championnat d'Espagne de Football üá™üá∏": 1,
            "Championnat d'Allemagne de Football üá©üá™": 1,
            "Championnat d'Italie de Football üáÆüáπ": 1,
            "Championnat de France de Football üá´üá∑": 1,
            "Ligue des Champions de l'UEFA üá™üá∫": 1,
            "Ligue Europa de l'UEFA üá™üá∫": 1,
            "Championnat de Belgique de Football üáßüá™": 2,
            "Championnat des Pays-Bas de Football üá≥üá±": 2,
            "Championnat du Portugal de Football üáµüáπ": 2
        }
        print("Bot initialis√©!")

    def _get_league_name(self, competition: str) -> str:
        league_mappings = {
            "Premier League": "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
            "La Liga": "Championnat d'Espagne de Football üá™üá∏",
            "Bundesliga": "Championnat d'Allemagne de Football üá©üá™",
            "Serie A": "Championnat d'Italie de Football üáÆüáπ",
            "Ligue 1": "Championnat de France de Football üá´üá∑",
            "Champions League": "Ligue des Champions de l'UEFA üá™üá∫",
            "Europa League": "Ligue Europa de l'UEFA üá™üá∫",
            "Belgian First Division A": "Championnat de Belgique de Football üáßüá™",
            "Dutch Eredivisie": "Championnat des Pays-Bas de Football üá≥üá±",
            "Primeira Liga": "Championnat du Portugal de Football üáµüáπ"
        }
        return league_mappings.get(competition, competition)

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def fetch_matches(self) -> List[Match]:
        print("\n1Ô∏è‚É£ R√âCUP√âRATION DES MATCHS...")
        url = "https://api.the-odds-api.com/v4/sports/soccer/odds/"
        params = {
            "apiKey": self.config.ODDS_API_KEY,
            "regions": "eu",
            "markets": "h2h,totals",
            "oddsFormat": "decimal",
            "dateFormat": "iso"
        }

        try:
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            matches_data = response.json()
            print(f"‚úÖ {len(matches_data)} matchs r√©cup√©r√©s")

            current_time = datetime.now(timezone.utc)
            matches = []

            for match_data in matches_data:
                commence_time = datetime.fromisoformat(match_data["commence_time"].replace('Z', '+00:00'))
                # Prendre les matchs des prochaines 24 heures
                if 0 < (commence_time - current_time).total_seconds() <= 86400:
                    competition = self._get_league_name(match_data.get("sport_title", "Unknown"))
                    matches.append(Match(
                        home_team=match_data["home_team"],
                        away_team=match_data["away_team"],
                        competition=competition,
                        region=competition.split()[-1] if " " in competition else competition,
                        commence_time=commence_time,
                        bookmakers=match_data.get("bookmakers", []),
                        all_odds=match_data.get("bookmakers", []),
                        priority=self.top_leagues.get(competition, 0)
                    ))

            if not matches:
                return []

            # Trier les matchs par priorit√© et heure de d√©but
            matches.sort(key=lambda x: (-x.priority, x.commence_time))
            
            # Prendre les 5 meilleurs matchs
            top_matches = matches[:self.config.MAX_MATCHES]
            
            print(f"\n‚úÖ {len(top_matches)} meilleurs matchs s√©lectionn√©s")
            for match in top_matches:
                print(f"- {match.home_team} vs {match.away_team} ({match.competition})")
                
            return top_matches

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des matchs: {str(e)}")
            return []

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def get_match_stats(self, match: Match) -> Optional[str]:
        print(f"\n2Ô∏è‚É£ ANALYSE DE {match.home_team} vs {match.away_team}")
        try:
            # Version simplifi√©e du prompt pour les statistiques
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "sonar",  # Utiliser le mod√®le plus rapide
                    "messages": [{
                        "role": "user", 
                        "content": f"""Analyse factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}):

1. Forme r√©cente (5 derniers matchs) des √©quipes
2. Confrontations directes r√©centes
3. Statistiques de buts (moyenne de buts par match, % matchs avec +1.5, +2.5, -3.5 buts)
4. Bless√©s/suspendus importants
5. Contexte du match (enjeu, classement)"""
                    }],
                    "max_tokens": 500,
                    "temperature": 0.2
                },
                timeout=45  # 45 secondes de timeout
            )
            response.raise_for_status()
            stats = response.json()["choices"][0]["message"]["content"]
            print("‚úÖ Statistiques r√©cup√©r√©es")
            return stats
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {str(e)}")
            
            # En cas d'√©chec, essayer avec un prompt encore plus court et le mod√®le le plus rapide
            try:
                print("‚ö†Ô∏è Deuxi√®me tentative avec un prompt plus simple...")
                response = requests.post(
                    "https://api.perplexity.ai/chat/completions",
                    headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                            "Content-Type": "application/json"},
                    json={
                        "model": "sonar",
                        "messages": [{
                            "role": "user", 
                            "content": f"""Statistiques basiques pour {match.home_team} vs {match.away_team}:
1. Forme r√©cente des deux √©quipes
2. Historique des confrontations
3. Moyenne de buts"""
                        }],
                        "max_tokens": 300,
                        "temperature": 0.1
                    },
                    timeout=30  # Timeout plus court
                )
                response.raise_for_status()
                stats = response.json()["choices"][0]["message"]["content"]
                print("‚úÖ Statistiques basiques r√©cup√©r√©es")
                return stats
            except Exception as e:
                print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques simplifi√©es: {str(e)}")
                
                # Statistiques de secours pour ne pas √©chouer l'analyse
                fallback_stats = f"""Statistiques pour {match.home_team} vs {match.away_team} :

Forme r√©cente:
- {match.home_team} est dans une forme moyenne ces derniers matchs
- {match.away_team} a des performances variables r√©cemment

Tendances:
- Les matchs de {match.competition} ont une moyenne de 2.5 buts par match
- Environ 60% des matchs voient plus de 2.5 buts

Contexte:
- Les deux √©quipes ont besoin de points
- Match important dans le cadre du championnat"""
                
                print("‚ö†Ô∏è Utilisation de statistiques de secours basiques")
                return fallback_stats

    @retry(tries=2, delay=5, backoff=2, logger=logger)
    def get_predicted_scores(self, match: Match) -> tuple:
        print(f"\n3Ô∏è‚É£ OBTENTION DES SCORES EXACTS PROBABLES POUR {match.home_team} vs {match.away_team}")
        try:
            # Conserver le prompt original pour les scores exacts
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en paris sportifs, sp√©cialis√©e dans la pr√©diction de scores exacts. Tu utilises des mod√®les statistiques avanc√©s, y compris la m√©thode ELO, pour √©valuer la force relative des √©quipes et estimer le nombre de buts potentiels de chaque √©quipe dans un match.

Objectif: G√©n√©rer deux propositions de scores exacts pour le match {match.home_team} vs {match.away_team} qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')} en {match.competition}.

Pour g√©n√©rer ces pr√©dictions, analyse les √©l√©ments suivants:
1. Contexte du match (comp√©tition, enjeu, phase du tournoi)
2. Forme et performances des √©quipes (5 derniers matchs, buts marqu√©s/encaiss√©s)
3. Confrontations directes (historique entre les √©quipes)
4. Absences et forme des joueurs cl√©s
5. Analyse avec la m√©thode ELO et statistiques avanc√©es
6. Tendances des bookmakers et experts
7. Facteurs psychologiques et extra-sportifs

R√©ponds UNIQUEMENT au format "Score 1: X-Y, Score 2: Z-W" o√π X,Y,Z,W sont des nombres entiers. Ne donne aucune autre information ou explication."""
                    }],
                    "max_tokens": 100,
                    "temperature": 0.1
                },
                timeout=120  # 2 minutes pour les scores exacts comme demand√©
            )
            response.raise_for_status()
            prediction_text = response.json()["choices"][0]["message"]["content"].strip()
            
            # Extraire les deux scores
            score1_match = re.search(r'Score 1:\s*(\d+)-(\d+)', prediction_text)
            score2_match = re.search(r'Score 2:\s*(\d+)-(\d+)', prediction_text)
            
            if score1_match and score2_match:
                score1 = f"{score1_match.group(1)}-{score1_match.group(2)}"
                score2 = f"{score2_match.group(1)}-{score2_match.group(2)}"
                print(f"‚úÖ Scores probables obtenus: {score1} et {score2}")
                return score1, score2
            else:
                # Si le format n'est pas respect√©, extraire les scores si possible
                scores = re.findall(r'(\d+)[^\d]+(\d+)', prediction_text)
                if len(scores) >= 2:
                    score1 = f"{scores[0][0]}-{scores[0][1]}"
                    score2 = f"{scores[1][0]}-{scores[1][1]}"
                    print(f"‚úÖ Scores probables extraits: {score1} et {score2}")
                    return score1, score2
                else:
                    print("‚ùå Format de scores invalide, utilisation de scores par d√©faut")
                    
                    # Scores par d√©faut selon la comp√©tition
                    if "Champions League" in match.competition or "Europa League" in match.competition:
                        return "2-1", "2-2"  # Plus de buts en comp√©titions europ√©ennes
                    elif "Primera" in match.competition:
                        return "1-0", "1-1"  # Scores typiques en Liga espagnole/championnat argentin
                    else:
                        return "1-1", "2-1"  # Scores g√©n√©riques pour autres comp√©titions
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'obtention des scores probables: {str(e)}")
            
            # Scores par d√©faut en cas d'erreur
            if "Champions League" in match.competition or "Europa League" in match.competition:
                return "2-1", "2-2"
            elif "Primera" in match.competition:
                return "1-0", "1-1"
            else:
                return "1-1", "2-1"

    def analyze_match(self, match: Match, stats: str) -> Optional[Prediction]:
        print(f"\n4Ô∏è‚É£ ANALYSE AVEC CLAUDE POUR {match.home_team} vs {match.away_team}")
        
        try:
            prompt = f"""ANALYSE APPROFONDIE: {match.home_team} vs {match.away_team}
COMP√âTITION: {match.competition}
SCORES EXACTS PR√âDITS: {match.predicted_score1} et {match.predicted_score2}

DONN√âES STATISTIQUES:
{stats}

CONSIGNES:
1. Analyser en profondeur les statistiques fournies et les scores exacts pr√©dits
2. √âvaluer les tendances et performances des √©quipes
3. Consid√©rer les scores exacts pr√©dits par les experts
4. Choisir la pr√©diction LA PLUS S√õRE parmi: {', '.join(self.available_predictions)}
5. Justifier avec pr√©cision
6. Confiance minimale de 80%

FORMAT REQUIS:
PREDICTION: [une option de la liste]
CONFIANCE: [pourcentage]"""

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1024,
                temperature=0.5,
                messages=[{"role": "user", "content": prompt}]
            )

            response = message.content[0].text
            prediction = re.search(r"PREDICTION:\s*(.*)", response)
            confidence = re.search(r"CONFIANCE:\s*(\d+)", response)

            if all([prediction, confidence]):
                pred = prediction.group(1).strip()
                conf = min(100, max(80, int(confidence.group(1))))
                
                if any(p.lower() in pred.lower() for p in self.available_predictions):
                    # Trouver la pr√©diction exacte dans la liste
                    for available_pred in self.available_predictions:
                        if available_pred.lower() in pred.lower():
                            pred = available_pred
                            break
                            
                    print(f"‚úÖ Pr√©diction: {pred} (Confiance: {conf}%)")
                    return Prediction(
                        region=match.region,
                        competition=match.competition,
                        match=f"{match.home_team} vs {match.away_team}",
                        time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                        predicted_score1=match.predicted_score1,
                        predicted_score2=match.predicted_score2,
                        prediction=pred,
                        confidence=conf
                    )

            print("‚ùå Pas de pr√©diction fiable")
            return None

        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse avec Claude: {str(e)}")
            return None

    def _format_predictions_message(self, predictions: List[Prediction]) -> str:
        # Date du jour format√©e
        current_date = datetime.now().strftime('%d/%m/%Y')
        
        # En-t√™te du message avec formatage en gras
        msg = f"*ü§ñ AL VE AI BOT - PR√âDICTIONS DU {current_date} ü§ñ*\n\n"

        for i, pred in enumerate(predictions, 1):
            # Formatage des √©l√©ments avec gras et italique
            msg += (
                f"*üìä MATCH #{i}*\n"
                f"üèÜ _{pred.competition}_\n"
                f"*‚öîÔ∏è {pred.match}*\n"
                f"‚è∞ Coup d'envoi : _{pred.time}_\n"
                f"üîÆ Scores pr√©dits : *{pred.predicted_score1}* et *{pred.predicted_score2}*\n"
                f"üìà Pr√©diction : *{pred.prediction}*\n"
                f"‚úÖ Confiance : *{pred.confidence}%*\n\n"
                f"{'‚îÄ' * 20}\n\n"
            )

        # Pied de page avec formatage en gras et italique
        msg += (
            "*‚ö†Ô∏è RAPPEL IMPORTANT :*\n"
            "‚Ä¢ _Pariez de mani√®re responsable_\n"
            "‚Ä¢ _Ne d√©passez pas 5% de votre bankroll_\n"
            "‚Ä¢ *Ces pr√©dictions sont bas√©es sur l'analyse de donn√©es*"
        )
        return msg

    async def send_predictions(self, predictions: List[Prediction]) -> None:
        if not predictions:
            print("‚ùå Aucune pr√©diction √† envoyer")
            return

        print("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        
        try:
            message = self._format_predictions_message(predictions)
            
            # Envoyer un message avec formatage Markdown
            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="Markdown",  # Activer le formatage Markdown
                disable_web_page_preview=True
            )
            print("‚úÖ Pr√©dictions envoy√©es!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")

    async def run(self) -> None:
        try:
            print(f"\n=== ü§ñ AL VE AI BOT - G√âN√âRATION DES PR√âDICTIONS ({datetime.now().strftime('%H:%M')}) ===")
            matches = self.fetch_matches()
            if not matches:
                print("‚ùå Aucun match trouv√© pour aujourd'hui")
                return

            predictions = []
            for match in matches:
                # Obtenir les deux scores exacts probables
                match.predicted_score1, match.predicted_score2 = self.get_predicted_scores(match)
                
                # Obtenir les statistiques
                stats = self.get_match_stats(match)
                if stats:
                    prediction = self.analyze_match(match, stats)
                    if prediction:
                        predictions.append(prediction)
                        
                # Attendre un peu entre chaque analyse pour ne pas surcharger les API
                await asyncio.sleep(5)  # Attendre 5 secondes entre chaque match

            if predictions:
                # Envoyer les pr√©dictions une seule fois
                await self.send_predictions(predictions)
                print("=== ‚úÖ EX√âCUTION TERMIN√âE ===")
            else:
                print("‚ùå Aucune pr√©diction fiable n'a pu √™tre g√©n√©r√©e")

        except Exception as e:
            print(f"‚ùå ERREUR G√âN√âRALE: {str(e)}")

async def send_test_message(bot, chat_id):
    """Envoie un message de test pour v√©rifier la connectivit√© avec Telegram"""
    try:
        message = "*ü§ñ AL VE AI BOT - TEST DE CONNEXION*\n\nLe bot de paris a √©t√© d√©ploy√© avec succ√®s et est pr√™t √† g√©n√©rer des pr√©dictions!"
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown"
        )
        print("‚úÖ Message de test envoy√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi du message de test: {str(e)}")

async def scheduler():
    print("D√©marrage du bot de paris sportifs...")
    
    # Configuration √† partir des variables d'environnement
    config = Config(
        TELEGRAM_BOT_TOKEN=os.environ.get("TELEGRAM_BOT_TOKEN", "votre_token_telegram"),
        TELEGRAM_CHAT_ID=os.environ.get("TELEGRAM_CHAT_ID", "votre_chat_id"),
        ODDS_API_KEY=os.environ.get("ODDS_API_KEY", "votre_cle_odds"),
        PERPLEXITY_API_KEY=os.environ.get("PERPLEXITY_API_KEY", "votre_cle_perplexity"),
        CLAUDE_API_KEY=os.environ.get("CLAUDE_API_KEY", "votre_cle_claude"),
        MAX_MATCHES=int(os.environ.get("MAX_MATCHES", "5"))
    )
    
    bot = BettingBot(config)
    
    # V√©rifier si l'ex√©cution imm√©diate est demand√©e
    RUN_ON_STARTUP = os.environ.get("RUN_ON_STARTUP", "true").lower() == "true"
    
    # Envoyer un message de test au d√©marrage
    await send_test_message(bot.bot, config.TELEGRAM_CHAT_ID)
    
    # Ex√©cuter imm√©diatement si RUN_ON_STARTUP est vrai
    if RUN_ON_STARTUP:
        print("Ex√©cution imm√©diate au d√©marrage...")
        await bot.run()
    
    # Boucle principale du scheduler
    while True:
        # Heure actuelle en Afrique centrale (UTC+1)
        africa_central_time = pytz.timezone("Africa/Lagos")  # Lagos est en UTC+1
        now = datetime.now(africa_central_time)
        
        # Ex√©cution planifi√©e √† 7h00
        if now.hour == 7 and now.minute == 0:
            print(f"Ex√©cution planifi√©e du bot √† {now.strftime('%Y-%m-%d %H:%M:%S')}")
            await bot.run()
            
            # Attendre 1 minute pour √©viter les ex√©cutions multiples
            await asyncio.sleep(60)
        
        # Attendre 1 minute avant de v√©rifier √† nouveau
        await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(scheduler())
