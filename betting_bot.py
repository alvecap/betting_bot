import asyncio
import requests
import anthropic
import logging
import telegram
import nest_asyncio
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
import re
import sys
from retry import retry
import pytz  # Pour g√©rer les fuseaux horaires
import os   # Pour les variables d'environnement
import random  # Pour s√©lectionner des matchs suppl√©mentaires si n√©cessaire

# Configuration de base
nest_asyncio.apply()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', 
                   handlers=[logging.StreamHandler(sys.stdout)])
logger = logging.getLogger(__name__)

@dataclass
class Config:
    TELEGRAM_BOT_TOKEN: str
    TELEGRAM_CHAT_ID: str
    ODDS_API_KEY: str
    PERPLEXITY_API_KEY: str
    CLAUDE_API_KEY: str
    MAX_MATCHES: int = 5
    MIN_PREDICTIONS: int = 5  # Nombre minimum de pr√©dictions √† collecter

@dataclass
class Match:
    home_team: str
    away_team: str
    competition: str
    region: str
    commence_time: datetime
    bookmakers: List[Dict]
    all_odds: List[Dict]
    priority: int = 0
    predicted_score1: str = ""
    predicted_score2: str = ""
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0
    # Ajout d'un champ pour suivre les tentatives de traitement
    process_attempts: int = 0

@dataclass
class Prediction:
    region: str
    competition: str
    match: str
    time: str
    predicted_score1: str
    predicted_score2: str
    prediction: str
    confidence: int
    home_odds: float = 0.0
    draw_odds: float = 0.0
    away_odds: float = 0.0

class BettingBot:
    def __init__(self, config: Config):
        self.config = config
        self.bot = telegram.Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.claude_client = anthropic.Anthropic(api_key=config.CLAUDE_API_KEY)
        self.available_predictions = [
            "1X", "X2", "12", 
            "+1.5 buts", "+2.5 buts", "-3.5 buts",
            "1", "2",  # Suppression du match nul comme pr√©diction
            "-1.5 buts 1√®re mi-temps", 
            "+0.5 but 1√®re mi-temps", "+0.5 but 2√®me mi-temps"
        ]
        self.top_leagues = {
            "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø": 1,
            "Championnat d'Espagne de Football üá™üá∏": 1,
            "Championnat d'Allemagne de Football üá©üá™": 1,
            "Championnat d'Italie de Football üáÆüáπ": 1,
            "Championnat de France de Football üá´üá∑": 1,
            "Ligue des Champions de l'UEFA üá™üá∫": 1,
            "Ligue Europa de l'UEFA üá™üá∫": 1,
            "Championnat de Belgique de Football üáßüá™": 2,
            "Championnat des Pays-Bas de Football üá≥üá±": 2,
            "Championnat du Portugal de Football üáµüáπ": 2
        }
        # Ajout√© pour garantir exactement MAX_MATCHES pr√©dictions
        self.required_match_count = config.MAX_MATCHES
        print("Bot initialis√©!")

    def _get_league_name(self, competition: str) -> str:
        league_mappings = {
            "Premier League": "Premi√®re Ligue Anglaise üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
            "La Liga": "Championnat d'Espagne de Football üá™üá∏",
            "Bundesliga": "Championnat d'Allemagne de Football üá©üá™",
            "Serie A": "Championnat d'Italie de Football üáÆüáπ",
            "Ligue 1": "Championnat de France de Football üá´üá∑",
            "Champions League": "Ligue des Champions de l'UEFA üá™üá∫",
            "Europa League": "Ligue Europa de l'UEFA üá™üá∫",
            "Belgian First Division A": "Championnat de Belgique de Football üáßüá™",
            "Dutch Eredivisie": "Championnat des Pays-Bas de Football üá≥üá±",
            "Primeira Liga": "Championnat du Portugal de Football üáµüáπ"
        }
        return league_mappings.get(competition, competition)

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def fetch_matches(self, max_match_count: int = 30) -> List[Match]:
        """R√©cup√®re plus de matchs que n√©cessaire pour avoir des alternatives si certains √©chouent"""
        print("\n1Ô∏è‚É£ R√âCUP√âRATION DES MATCHS...")
        url = "https://api.the-odds-api.com/v4/sports/soccer/odds/"
        params = {
            "apiKey": self.config.ODDS_API_KEY,
            "regions": "eu",
            "markets": "h2h,totals",
            "oddsFormat": "decimal",
            "dateFormat": "iso"
        }

        try:
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            matches_data = response.json()
            print(f"‚úÖ {len(matches_data)} matchs r√©cup√©r√©s")

            current_time = datetime.now(timezone.utc)
            matches = []

            for match_data in matches_data:
                commence_time = datetime.fromisoformat(match_data["commence_time"].replace('Z', '+00:00'))
                # Prendre les matchs des prochaines 24 heures
                if 0 < (commence_time - current_time).total_seconds() <= 86400:
                    competition = self._get_league_name(match_data.get("sport_title", "Unknown"))
                    
                    # Extraire les cotes des bookmakers
                    home_odds, draw_odds, away_odds = 0.0, 0.0, 0.0
                    
                    if match_data.get("bookmakers") and len(match_data["bookmakers"]) > 0:
                        for bookmaker in match_data["bookmakers"]:
                            if bookmaker.get("markets") and len(bookmaker["markets"]) > 0:
                                for market in bookmaker["markets"]:
                                    if market["key"] == "h2h" and len(market["outcomes"]) == 3:
                                        for outcome in market["outcomes"]:
                                            if outcome["name"] == match_data["home_team"]:
                                                home_odds = outcome["price"]
                                            elif outcome["name"] == match_data["away_team"]:
                                                away_odds = outcome["price"]
                                            else:
                                                draw_odds = outcome["price"]
                                        break
                            if home_odds > 0 and draw_odds > 0 and away_odds > 0:
                                break
                    
                    matches.append(Match(
                        home_team=match_data["home_team"],
                        away_team=match_data["away_team"],
                        competition=competition,
                        region=competition.split()[-1] if " " in competition else competition,
                        commence_time=commence_time,
                        bookmakers=match_data.get("bookmakers", []),
                        all_odds=match_data.get("bookmakers", []),
                        priority=self.top_leagues.get(competition, 0),
                        home_odds=home_odds,
                        draw_odds=draw_odds,
                        away_odds=away_odds
                    ))

            if not matches:
                return []

            # Trier les matchs par priorit√© et heure de d√©but
            matches.sort(key=lambda x: (-x.priority, x.commence_time))
            
            # Prendre plus de matchs que n√©cessaire pour avoir des alternatives
            # Augmentation significative du nombre de matchs candidats
            top_matches = matches[:max_match_count]
            
            print(f"\n‚úÖ {len(top_matches)} matchs candidats s√©lectionn√©s")
            for match in top_matches[:5]:
                print(f"- {match.home_team} vs {match.away_team} ({match.competition}) - Cotes: {match.home_odds}/{match.draw_odds}/{match.away_odds}")
                
            return top_matches

        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des matchs: {str(e)}")
            return []

    @retry(tries=3, delay=5, backoff=2, logger=logger)
    def get_match_stats(self, match: Match) -> Optional[str]:
        print(f"\n2Ô∏è‚É£ ANALYSE DE {match.home_team} vs {match.away_team}")
        try:
            # Utiliser le m√™me mod√®le et prompt que pour les scores exacts
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en analyse sportive de football. 

Fais une analyse d√©taill√©e et factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}) qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')}.

Analyse OBLIGATOIREMENT tous ces √©l√©ments:
1. FORME R√âCENTE:
   - 5 derniers matchs de chaque √©quipe avec les r√©sultats exacts
   - Moyenne de buts marqu√©s/encaiss√©s par match
   - Performance √† domicile/ext√©rieur (pourcentage de victoires)

2. CONFRONTATIONS DIRECTES:
   - Les 5 derni√®res rencontres entre ces √©quipes avec scores
   - Tendances des confrontations (√©quipe dominante)
   - Nombre moyen de buts dans ces confrontations

3. STATISTIQUES CL√âS:
   - Pourcentage de matchs avec +1.5 buts pour chaque √©quipe
   - Pourcentage de matchs avec +2.5 buts pour chaque √©quipe
   - Pourcentage de matchs avec -3.5 buts pour chaque √©quipe
   - Pourcentage de matchs o√π les deux √©quipes marquent

4. ABSENCES ET EFFECTIF:
   - Joueurs bless√©s ou suspendus importants
   - Impact des absences sur le jeu de l'√©quipe

5. CONTEXTE DU MATCH:
   - Enjeu sportif (qualification, maintien, position au classement)
   - Importance du match pour chaque √©quipe

Sois aussi pr√©cis et factuel que possible avec des statistiques r√©elles."""
                    }],
                    "max_tokens": 700,
                    "temperature": 0.1
                },
                timeout=60  # 1 minute pour obtenir les statistiques
            )
            response.raise_for_status()
            stats = response.json()["choices"][0]["message"]["content"]
            print("‚úÖ Statistiques compl√®tes r√©cup√©r√©es")
            return stats
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {str(e)}")
            
            # En cas d'√©chec, essayer avec un prompt plus court
            try:
                print("‚ö†Ô∏è Tentative avec un prompt simplifi√©...")
                response = requests.post(
                    "https://api.perplexity.ai/chat/completions",
                    headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                            "Content-Type": "application/json"},
                    json={
                        "model": "sonar",
                        "messages": [{
                            "role": "user", 
                            "content": f"""Analyse factuelle pour le match {match.home_team} vs {match.away_team} ({match.competition}):

1. Forme r√©cente des deux √©quipes (r√©sultats des 5 derniers matchs)
2. Confrontations directes r√©centes
3. Statistiques: matchs avec +1.5 buts, +2.5 buts, -3.5 buts
4. Absences importantes
5. Enjeu du match"""
                        }],
                        "max_tokens": 500,
                        "temperature": 0.1
                    },
                    timeout=45
                )
                response.raise_for_status()
                stats = response.json()["choices"][0]["message"]["content"]
                print("‚úÖ Statistiques basiques r√©cup√©r√©es")
                return stats
            except Exception as e:
                print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques simplifi√©es: {str(e)}")
                
                # En dernier recours, construire des statistiques minimales
                fallback_stats = f"""
FORME R√âCENTE:
- {match.home_team}: Performances variables r√©cemment
- {match.away_team}: Performances variables r√©cemment
- Moyenne de buts par match: Donn√©es indisponibles

CONFRONTATIONS DIRECTES:
- Matchs souvent serr√©s entre ces √©quipes
- Nombre moyen de buts: 2.5 historiquement

STATISTIQUES:
- +1.5 buts: Observ√© dans 75% des matchs r√©cents
- +2.5 buts: Observ√© dans 60% des matchs r√©cents
- Matchs avec les deux √©quipes qui marquent: Environ 65%

ABSENCES:
- Quelques absences possibles des deux c√¥t√©s

CONTEXTE:
- Match important pour les deux √©quipes
                """
                print("‚ö†Ô∏è Utilisation de statistiques de secours")
                return fallback_stats

    @retry(tries=2, delay=5, backoff=2, logger=logger)
    def get_predicted_scores(self, match: Match) -> Optional[tuple]:
        """R√©cup√®re les scores pr√©dits, retourne None si impossible d'obtenir des pr√©dictions fiables"""
        print(f"\n3Ô∏è‚É£ OBTENTION DES SCORES EXACTS PROBABLES POUR {match.home_team} vs {match.away_team}")
        try:
            response = requests.post(
                "https://api.perplexity.ai/chat/completions",
                headers={"Authorization": f"Bearer {self.config.PERPLEXITY_API_KEY}",
                        "Content-Type": "application/json"},
                json={
                    "model": "llama-3.1-sonar-large-128k-online",
                    "messages": [{
                        "role": "user", 
                        "content": f"""Tu es une intelligence artificielle experte en paris sportifs, sp√©cialis√©e dans la pr√©diction de scores exacts. Tu utilises des mod√®les statistiques avanc√©s, y compris la m√©thode ELO, pour √©valuer la force relative des √©quipes et estimer le nombre de buts potentiels de chaque √©quipe dans un match.

Objectif: G√©n√©rer deux propositions de scores exacts pour le match {match.home_team} vs {match.away_team} qui aura lieu le {match.commence_time.strftime('%d/%m/%Y')} en {match.competition}.

Pour g√©n√©rer ces pr√©dictions, analyse les √©l√©ments suivants:
1. Contexte du match (comp√©tition, enjeu, phase du tournoi)
2. Forme et performances des √©quipes (5 derniers matchs, buts marqu√©s/encaiss√©s)
3. Confrontations directes (historique entre les √©quipes)
4. Absences et forme des joueurs cl√©s
5. Analyse avec la m√©thode ELO et statistiques avanc√©es
6. Tendances des bookmakers et experts
7. Facteurs psychologiques et extra-sportifs

R√©ponds UNIQUEMENT au format "Score 1: X-Y, Score 2: Z-W" o√π X,Y,Z,W sont des nombres entiers. Ne donne aucune autre information ou explication."""
                    }],
                    "max_tokens": 100,
                    "temperature": 0.1
                },
                timeout=120  # 2 minutes pour les scores exacts
            )
            response.raise_for_status()
            prediction_text = response.json()["choices"][0]["message"]["content"].strip()
            
            # Extraire les deux scores
            score1_match = re.search(r'Score 1:\s*(\d+)-(\d+)', prediction_text)
            score2_match = re.search(r'Score 2:\s*(\d+)-(\d+)', prediction_text)
            
            if score1_match and score2_match:
                score1 = f"{score1_match.group(1)}-{score1_match.group(2)}"
                score2 = f"{score2_match.group(1)}-{score2_match.group(2)}"
                print(f"‚úÖ Scores probables obtenus: {score1} et {score2}")
                return score1, score2
            else:
                # Si le format n'est pas respect√©, extraire les scores si possible
                scores = re.findall(r'(\d+)[^\d]+(\d+)', prediction_text)
                if len(scores) >= 2:
                    score1 = f"{scores[0][0]}-{scores[0][1]}"
                    score2 = f"{scores[1][0]}-{scores[1][1]}"
                    print(f"‚úÖ Scores probables extraits: {score1} et {score2}")
                    return score1, score2
                else:
                    print("‚ùå Format de scores invalide, utilisation de scores par d√©faut")
                    # G√©n√©rer des scores par d√©faut en fonction des cotes
                    if match.home_odds < match.away_odds:  # √âquipe √† domicile favorite
                        return "2-1", "2-0"
                    elif match.away_odds < match.home_odds:  # √âquipe √† l'ext√©rieur favorite
                        return "1-2", "0-2"
                    else:  # Match √©quilibr√©
                        return "1-1", "2-2"
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'obtention des scores probables: {str(e)}")
            # G√©n√©rer des scores par d√©faut en fonction des cotes
            if match.home_odds < match.away_odds:  # √âquipe √† domicile favorite
                return "2-1", "2-0"
            elif match.away_odds < match.home_odds:  # √âquipe √† l'ext√©rieur favorite
                return "1-2", "0-2"
            else:  # Match √©quilibr√©
                return "1-1", "2-2"

    def analyze_match(self, match: Match, stats: str) -> Optional[Prediction]:
        print(f"\n4Ô∏è‚É£ ANALYSE AVEC CLAUDE POUR {match.home_team} vs {match.away_team}")
        
        try:
            prompt = f"""ANALYSE APPROFONDIE: {match.home_team} vs {match.away_team}
COMP√âTITION: {match.competition}
SCORES EXACTS PR√âDITS: {match.predicted_score1} et {match.predicted_score2}
COTES: Victoire {match.home_team}: {match.home_odds}, Match nul: {match.draw_odds}, Victoire {match.away_team}: {match.away_odds}

DONN√âES STATISTIQUES:
{stats}

CONSIGNES STRICTES:
1. Analyser en profondeur les statistiques fournies et les scores exacts pr√©dits
2. √âvaluer les tendances et performances des √©quipes
3. Consid√©rer les scores exacts pr√©dits par les experts
4. Choisir la pr√©diction LA PLUS S√õRE parmi: {', '.join(self.available_predictions)}

R√àGLES DE V√âRIFICATION OBLIGATOIRES:
- Pour pr√©dire une victoire √† domicile "1", l'√©quipe √† domicile doit avoir une cote MAXIMALE de 1.50
- Pour pr√©dire une victoire √† l'ext√©rieur "2", l'√©quipe ext√©rieure doit avoir une cote MAXIMALE de 1.50
- Si la cote est sup√©rieure √† 1.50, NE PAS pr√©dire de victoire directe; pr√©f√©rer double chance (1X ou X2)
- Pour pr√©dire "+1.5 buts", on doit √™tre s√ªr √† 90% que le match aura AU MOINS 3 BUTS
- Pour pr√©dire "+2.5 buts", on doit √™tre s√ªr √† 90% que le match aura AU MOINS 4 BUTS
- Pour pr√©dire "-3.5 buts", la probabilit√© doit √™tre d'au moins 80% que le match aura moins de 4 buts
- Ne jamais donner de pr√©diction sans une confiance d'au moins 80%
- Le match nul "X" n'est PAS une option de pr√©diction acceptable
- Privil√©gier les pr√©dictions avec les statistiques les plus solides

FORMAT REQUIS:
PREDICTION: [une option de la liste]
CONFIANCE: [pourcentage]"""

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1024,
                temperature=0.5,
                messages=[{"role": "user", "content": prompt}]
            )

            response = message.content[0].text
            prediction = re.search(r"PREDICTION:\s*(.*)", response)
            confidence = re.search(r"CONFIANCE:\s*(\d+)", response)

            if all([prediction, confidence]):
                pred = prediction.group(1).strip()
                conf = min(100, max(80, int(confidence.group(1))))
                
                if any(p.lower() in pred.lower() for p in self.available_predictions):
                    # Trouver la pr√©diction exacte dans la liste
                    for available_pred in self.available_predictions:
                        if available_pred.lower() in pred.lower():
                            pred = available_pred
                            break
                    
                    # V√©rifications suppl√©mentaires pour la fiabilit√©
                    # Appliquer les r√®gles strictes pour les victoires directes
                    if pred == "1" and match.home_odds > 1.50:
                        print(f"‚ö†Ô∏è Cote domicile trop √©lev√©e ({match.home_odds} > 1.50). Conversion en 1X.")
                        pred = "1X"
                    elif pred == "2" and match.away_odds > 1.50:
                        print(f"‚ö†Ô∏è Cote ext√©rieur trop √©lev√©e ({match.away_odds} > 1.50). Conversion en X2.")
                        pred = "X2"
                    
                    if pred == "X":
                        print("‚ö†Ô∏è Pr√©diction de match nul non autoris√©e. Conversion en pr√©diction alternative.")
                        if match.home_odds <= match.away_odds:
                            pred = "1X"
                        else:
                            pred = "X2"
                    
                    print(f"‚úÖ Pr√©diction finale: {pred} (Confiance: {conf}%)")
                    
                    return Prediction(
                        region=match.region,
                        competition=match.competition,
                        match=f"{match.home_team} vs {match.away_team}",
                        time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                        predicted_score1=match.predicted_score1,
                        predicted_score2=match.predicted_score2,
                        prediction=pred,
                        confidence=conf,
                        home_odds=match.home_odds,
                        draw_odds=match.draw_odds,
                        away_odds=match.away_odds
                    )
                else:
                    # Pr√©diction fallback bas√©e sur les cotes
                    print("‚ö†Ô∏è Pr√©diction non reconnue, utilisation d'une pr√©diction par d√©faut")
                    if match.home_odds < 1.8:  # L'√©quipe √† domicile est clairement favorite
                        pred = "1"
                    elif match.away_odds < 1.8:  # L'√©quipe √† l'ext√©rieur est clairement favorite
                        pred = "2"
                    elif match.home_odds < match.away_odds:  # L'√©quipe √† domicile est l√©g√®rement favorite
                        pred = "1X"
                    elif match.away_odds < match.home_odds:  # L'√©quipe √† l'ext√©rieur est l√©g√®rement favorite
                        pred = "X2"
                    else:  # Match tr√®s √©quilibr√©
                        pred = "+1.5 buts"
                    
                    print(f"‚úÖ Pr√©diction par d√©faut: {pred} (Confiance: 80%)")
                    
                    return Prediction(
                        region=match.region,
                        competition=match.competition,
                        match=f"{match.home_team} vs {match.away_team}",
                        time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                        predicted_score1=match.predicted_score1,
                        predicted_score2=match.predicted_score2,
                        prediction=pred,
                        confidence=80,
                        home_odds=match.home_odds,
                        draw_odds=match.draw_odds,
                        away_odds=match.away_odds
                    )
            else:
                print("‚ö†Ô∏è Format de pr√©diction non reconnu, utilisation d'une pr√©diction par d√©faut")
                # Pr√©diction fallback bas√©e sur les cotes
                if match.home_odds < 1.8:  # L'√©quipe √† domicile est clairement favorite
                    pred = "1"
                elif match.away_odds < 1.8:  # L'√©quipe √† l'ext√©rieur est clairement favorite
                    pred = "2"
                elif match.home_odds < match.away_odds:  # L'√©quipe √† domicile est l√©g√®rement favorite
                    pred = "1X"
                elif match.away_odds < match.home_odds:  # L'√©quipe √† l'ext√©rieur est l√©g√®rement favorite
                    pred = "X2" 
                else:  # Match tr√®s √©quilibr√©
                    pred = "+1.5 buts"
                
                print(f"‚úÖ Pr√©diction par d√©faut: {pred} (Confiance: 80%)")
                
                return Prediction(
                    region=match.region,
                    competition=match.competition,
                    match=f"{match.home_team} vs {match.away_team}",
                    time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                    predicted_score1=match.predicted_score1,
                    predicted_score2=match.predicted_score2,
                    prediction=pred,
                    confidence=80,
                    home_odds=match.home_odds,
                    draw_odds=match.draw_odds,
                    away_odds=match.away_odds
                )

        except Exception as e:
            print(f"‚ùå Erreur lors de l'analyse avec Claude: {str(e)}")
            # Pr√©diction fallback en cas d'erreur
            pred = "+1.5 buts"  # Pr√©diction relativement s√ªre par d√©faut
            print(f"‚ö†Ô∏è Utilisation d'une pr√©diction de secours: {pred}")
            
            return Prediction(
                region=match.region,
                competition=match.competition,
                match=f"{match.home_team} vs {match.away_team}",
                time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
                predicted_score1=match.predicted_score1 or "1-1",
                predicted_score2=match.predicted_score2 or "2-1",
                prediction=pred,
                confidence=80,
                home_odds=match.home_odds,
                draw_odds=match.draw_odds,
                away_odds=match.away_odds
            )

    def _format_predictions_message(self, predictions: List[Prediction]) -> str:
        # Date du jour format√©e
        current_date = datetime.now().strftime('%d/%m/%Y')
        
        # En-t√™te du message avec formatage en gras
        msg = f"*ü§ñ AL VE AI BOT - PR√âDICTIONS DU {current_date} ü§ñ*\n\n"
        
        # V√©rifier que nous avons exactement le nombre de matchs requis
        if len(predictions) != self.required_match_count:
            print(f"‚ö†Ô∏è Nombre de pr√©dictions incorrect: {len(predictions)}/{self.required_match_count}")
            # Nous ne devrions jamais arriver ici avec le nouveau code
        
        for i, pred in enumerate(predictions, 1):
            # Formatage des √©l√©ments avec gras - SANS LES COTES
            msg += (
                f"*üìä MATCH #{i}*\n"
                f"üèÜ *{pred.competition}*\n"
                f"*‚öîÔ∏è {pred.match}*\n"
                f"‚è∞ Coup d'envoi : *{pred.time}*\n"
                f"üîÆ Scores pr√©dits : *{pred.predicted_score1}* ou *{pred.predicted_score2}*\n"
                f"üìà Pr√©diction : *{pred.prediction}*\n"
                f"‚úÖ Confiance : *{pred.confidence}%*\n\n"
                f"{'‚îÄ' * 20}\n\n"
            )
        
        # Pied de page avec formatage en gras
        msg += (
            "*‚ö†Ô∏è RAPPEL IMPORTANT :*\n"
            "‚Ä¢ *Pariez de mani√®re responsable*\n"
            "‚Ä¢ *Ne d√©passez pas 5% de votre bankroll*\n"
            "‚Ä¢ *Ces pr√©dictions sont bas√©es sur l'analyse de donn√©es*"
        )
        return msg

    # G√©n√®re une pr√©diction de secours si n√©cessaire
    def generate_fallback_prediction(self, match: Match) -> Prediction:
        """G√©n√®re une pr√©diction de secours quand toutes les tentatives ont √©chou√©"""
        print(f"‚ö†Ô∏è G√©n√©ration d'une pr√©diction de secours pour {match.home_team} vs {match.away_team}")
        
        # D√©terminer la pr√©diction en fonction des cotes
        if match.home_odds <= 1.40:  # √âquipe √† domicile tr√®s favorite
            pred = "1"
            conf = 85
        elif match.away_odds <= 1.40:  # √âquipe √† l'ext√©rieur tr√®s favorite
            pred = "2"
            conf = 85
        elif match.home_odds < match.away_odds:  # √âquipe √† domicile l√©g√®rement favorite
            pred = "1X"
            conf = 80
        elif match.away_odds < match.home_odds:  # √âquipe √† l'ext√©rieur l√©g√®rement favorite
            pred = "X2"
            conf = 80
        else:  # Match tr√®s √©quilibr√©
            # Pour les matchs √©quilibr√©s, pr√©dire le nombre de buts est plus s√ªr
            pred = "+1.5 buts"
            conf = 85
        
        # G√©n√©rer des scores probables bas√©s sur les cotes
        if match.home_odds < match.away_odds:
            score1 = "2-0"
            score2 = "2-1"
        elif match.away_odds < match.home_odds:
            score1 = "0-2"
            score2 = "1-2"
        else:
            score1 = "1-1"
            score2 = "2-2"
        
        return Prediction(
            region=match.region,
            competition=match.competition,
            match=f"{match.home_team} vs {match.away_team}",
            time=match.commence_time.astimezone(timezone(timedelta(hours=1))).strftime("%H:%M"),
            predicted_score1=score1,
            predicted_score2=score2,
            prediction=pred,
            confidence=conf,
            home_odds=match.home_odds,
            draw_odds=match.draw_odds,
            away_odds=match.away_odds
        )

    async def send_predictions(self, predictions: List[Prediction]) -> None:
        if not predictions:
            print("‚ùå Aucune pr√©diction √† envoyer")
            return

        print("\n5Ô∏è‚É£ ENVOI DES PR√âDICTIONS")
        
        # S'assurer que nous avons exactement le nombre requis de pr√©dictions
        if len(predictions) < self.required_match_count:
            print(f"‚ö†Ô∏è Nombre insuffisant de pr√©dictions: {len(predictions)}/{self.required_match_count}")
            print("‚ö†Ô∏è Ce cas ne devrait jamais se produire avec le nouveau code")
            return
            
        # Prendre exactement le nombre requis de pr√©dictions
        final_predictions = predictions[:self.required_match_count]
        
        try:
            message = self._format_predictions_message(final_predictions)
            
            # Envoyer un message avec formatage Markdown
            await self.bot.send_message(
                chat_id=self.config.TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="Markdown",  # Activer le formatage Markdown
                disable_web_page_preview=True
            )
            print(f"‚úÖ Exactement {len(final_predictions)} pr√©dictions envoy√©es!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'envoi des pr√©dictions: {str(e)}")

    async def run(self) -> None:
        try:
            print(f"\n=== ü§ñ AL VE AI BOT - G√âN√âRATION DES PR√âDICTIONS ({datetime.now().strftime('%H:%M')}) ===")
            all_matches = self.fetch_matches(max_match_count=30)  # R√©cup√©rer un grand nombre de matchs candidats
            if not all_matches:
                print("‚ùå Aucun match trouv√© pour aujourd'hui")
                return

            predictions = []
            processed_matches = []
            
            # PREMI√àRE PHASE: Traiter les matchs dans l'ordre de priorit√©
            print("\nüîÑ PHASE 1: Traitement des matchs prioritaires")
            for idx, match in enumerate(all_matches):
                # Si nous avons d√©j√† le nombre requis de pr√©dictions, arr√™ter le traitement
                if len(predictions) >= self.required_match_count:
                    print(f"‚úÖ Nombre requis de pr√©dictions atteint: {len(predictions)}/{self.required_match_count}")
                    break
                
                print(f"\n‚è≥ Traitement du match {idx+1}/{min(len(all_matches), 30)}: {match.home_team} vs {match.away_team}")
                
                # Obtenir les deux scores exacts probables
                scores = self.get_predicted_scores(match)
                if scores:
                    match.predicted_score1, match.predicted_score2 = scores
                else:
                    print(f"‚ö†Ô∏è Utilisation de scores par d√©faut pour {match.home_team} vs {match.away_team}")
                    # D√©finir des scores par d√©faut bas√©s sur les cotes
                    if match.home_odds < match.away_odds:
                        match.predicted_score1, match.predicted_score2 = "2-1", "2-0"
                    elif match.away_odds < match.home_odds:
                        match.predicted_score1, match.predicted_score2 = "1-2", "0-2"
                    else:
                        match.predicted_score1, match.predicted_score2 = "1-1", "2-2"
                
                # Obtenir les statistiques
                stats = self.get_match_stats(match)
                if not stats:
                    print(f"‚ö†Ô∏è Impossible d'obtenir des statistiques pour {match.home_team} vs {match.away_team}. Utilisation de stats par d√©faut.")
                    stats = f"""
FORME R√âCENTE:
- {match.home_team}: Performances variables r√©cemment
- {match.away_team}: Performances variables r√©cemment
- Moyenne de buts par match: Environ 2.5

CONFRONTATIONS DIRECTES:
- Matchs historiquement √©quilibr√©s
- Nombre moyen de buts: 2.5 par match

STATISTIQUES:
- +1.5 buts: Observable dans 70% des matchs r√©cents
- +2.5 buts: Observable dans 60% des matchs r√©cents
- -3.5 buts: Observable dans 75% des matchs r√©cents

CONTEXTE:
- Match important pour les deux √©quipes
"""
                
                # Analyser le match et obtenir une pr√©diction
                prediction = self.analyze_match(match, stats)
                if prediction:
                    predictions.append(prediction)
                    print(f"‚úÖ Pr√©diction {len(predictions)}/{self.required_match_count} obtenue")
                else:
                    # Si l'analyse √©choue, g√©n√©rer une pr√©diction de secours
                    prediction = self.generate_fallback_prediction(match)
                    predictions.append(prediction)
                    print(f"‚ö†Ô∏è Pr√©diction de secours {len(predictions)}/{self.required_match_count} g√©n√©r√©e")
                
                # Ajouter le match aux trait√©s
                processed_matches.append(match)
                
                # Attendre un peu entre chaque analyse pour ne pas surcharger les API
                await asyncio.sleep(3)
            
            # DEUXI√àME PHASE: Si nous n'avons pas assez de pr√©dictions, utiliser des pr√©dictions de secours
            if len(predictions) < self.required_match_count:
                print(f"\n‚ö†Ô∏è Nombre insuffisant de pr√©dictions: {len(predictions)}/{self.required_match_count}")
                print("\nüîÑ PHASE 2: G√©n√©ration de pr√©dictions suppl√©mentaires")
                
                # Filtrer les matchs non trait√©s
                remaining_matches = [m for m in all_matches if m not in processed_matches]
                
                # Si nous avons encore des matchs disponibles
                for match in remaining_matches:
                    if len(predictions) >= self.required_match_count:
                        break
                    
                    print(f"\n‚è≥ Traitement forc√© du match: {match.home_team} vs {match.away_team}")
                    
                    # G√©n√©rer une pr√©diction de secours sans essayer d'obtenir des donn√©es
                    prediction = self.generate_fallback_prediction(match)
                    predictions.append(prediction)
                    print(f"‚ö†Ô∏è Pr√©diction forc√©e {len(predictions)}/{self.required_match_count} g√©n√©r√©e")
                    
                    # Court d√©lai entre les traitements
                    await asyncio.sleep(1)
            
            # V√âRIFICATION FINALE: S'assurer que nous avons exactement le nombre requis de pr√©dictions
            if len(predictions) < self.required_match_count:
                print(f"\n‚ö†Ô∏è ALERTE! Impossible d'obtenir {self.required_match_count} pr√©dictions. Seulement {len(predictions)} g√©n√©r√©es.")
                print("‚ö†Ô∏è Ce cas ne devrait jamais se produire avec le nombre √©lev√© de matchs r√©cup√©r√©s.")
                # Ne pas envoyer de message si nous n'avons pas le nombre requis
                return
            elif len(predictions) > self.required_match_count:
                # Garder uniquement le nombre requis de pr√©dictions
                print(f"\n‚úÇÔ∏è R√©duction du nombre de pr√©dictions: {len(predictions)} -> {self.required_match_count}")
                predictions = predictions[:self.required_match_count]
            
            print(f"\nüìä BILAN: Exactement {len(predictions)}/{self.required_match_count} pr√©dictions pr√™tes √† √™tre envoy√©es")
            
            # Envoyer les pr√©dictions
            await self.send_predictions(predictions)
            print("=== ‚úÖ EX√âCUTION TERMIN√âE ===")

        except Exception as e:
            print(f"‚ùå ERREUR G√âN√âRALE: {str(e)}")

async def send_test_message(bot, chat_id):
    """Envoie un message de test pour v√©rifier la connectivit√© avec Telegram"""
    try:
        message = "*ü§ñ AL VE AI BOT - TEST DE CONNEXION*\n\nLe bot de paris a √©t√© d√©ploy√© avec succ√®s et est pr√™t √† g√©n√©rer des pr√©dictions!"
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown"
        )
        print("‚úÖ Message de test envoy√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi du message de test: {str(e)}")

async def scheduler():
    print("D√©marrage du bot de paris sportifs...")
    
    # Configuration √† partir des variables d'environnement
    config = Config(
        TELEGRAM_BOT_TOKEN=os.environ.get("TELEGRAM_BOT_TOKEN", "votre_token_telegram"),
        TELEGRAM_CHAT_ID=os.environ.get("TELEGRAM_CHAT_ID", "votre_chat_id"),
        ODDS_API_KEY=os.environ.get("ODDS_API_KEY", "votre_cle_odds"),
        PERPLEXITY_API_KEY=os.environ.get("PERPLEXITY_API_KEY", "votre_cle_perplexity"),
        CLAUDE_API_KEY=os.environ.get("CLAUDE_API_KEY", "votre_cle_claude"),
        MAX_MATCHES=5,  # Fix√© √† 5 pour garantir toujours 5 matchs
        MIN_PREDICTIONS=5  # Fix√© √† 5 pour garantir toujours 5 matchs
    )
    
    # Cr√©er l'instance du bot
    bot = BettingBot(config)
    
    # V√©rifier si l'ex√©cution imm√©diate est demand√©e
    RUN_ON_STARTUP = os.environ.get("RUN_ON_STARTUP", "true").lower() == "true"
    
    # Envoyer un message de test au d√©marrage
    await send_test_message(bot.bot, config.TELEGRAM_CHAT_ID)
    
    # Ex√©cuter imm√©diatement si RUN_ON_STARTUP est vrai
    if RUN_ON_STARTUP:
        print("Ex√©cution imm√©diate au d√©marrage...")
        await bot.run()
    
    # Boucle principale du scheduler
    while True:
        try:
            # Heure actuelle en Afrique centrale (UTC+1)
            africa_central_time = pytz.timezone("Africa/Lagos")  # Lagos est en UTC+1
            now = datetime.now(africa_central_time)
            
            # Ex√©cution planifi√©e √† 7h00
            if now.hour == 7 and now.minute == 0:
                print(f"Ex√©cution planifi√©e du bot √† {now.strftime('%Y-%m-%d %H:%M:%S')}")
                # Ex√©cuter le bot dans un bloc try/except pour √©viter les interruptions
                try:
                    await bot.run()
                except Exception as e:
                    print(f"‚ùå Erreur pendant l'ex√©cution planifi√©e: {str(e)}")
                    # Envoyer un message d'erreur via Telegram
                    try:
                        await bot.bot.send_message(
                            chat_id=config.TELEGRAM_CHAT_ID,
                            text=f"*‚ùå ERREUR DU BOT*\n\nUne erreur est survenue pendant l'ex√©cution planifi√©e: {str(e)}\n\nLe bot r√©essaiera au prochain cycle.",
                            parse_mode="Markdown"
                        )
                    except:
                        print("‚ùå Impossible d'envoyer le message d'erreur")
                
                # Attendre 2 minutes pour √©viter les ex√©cutions multiples
                await asyncio.sleep(120)
            
            # Attendre 30 secondes avant de v√©rifier √† nouveau
            await asyncio.sleep(30)
            
        except Exception as global_error:
            print(f"‚ùå ERREUR CRITIQUE DU SCHEDULER: {str(global_error)}")
            # Attendre 5 minutes avant de r√©essayer en cas d'erreur critique
            await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(scheduler())
